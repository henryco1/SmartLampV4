
SmartLampV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000349c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a4  080037a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000070  0800381c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800381c  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ded9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb3  00000000  00000000  0002df79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002fe30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e87  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cd3  00000000  00000000  0005227f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2c1f  00000000  00000000  0005bf52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011eb71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f7c  00000000  00000000  0011ebec  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  00121b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003610 	.word	0x08003610

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003610 	.word	0x08003610

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce5 	bl	8000e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f894 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f98c 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f96c 	bl	80007b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f93a 	bl	8000758 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8fa 	bl	80006dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // LED pin: the LED strip uses PA7, PA7 is AF#0 (SPI1 SDO / MISO).
  GPIOA->MODER    &= ~( 0x3 << ( 7 * 2 ) );		// clear / set to reset
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER    |=  ( 0x2 << ( 7 * 2 ) );		// set to alt func mode
 80004f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000506:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] &= ~( 0x00 << (7 * 2) );		// clear
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000510:	6a1b      	ldr	r3, [r3, #32]
 8000512:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= ( 0x5 << (7 * 4) );		// set AF5 for PA7 is SPI1_MOSI (GPIO_AFRL_AFSEL5)
 8000514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000518:	6a1b      	ldr	r3, [r3, #32]
 800051a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000522:	6213      	str	r3, [r2, #32]
   * - Power button uses PA0
   * - Mode switch left uses PA1
   * - Mode switch right uses PA2
   */

  GPIOA->MODER    &= ~( (0x3 << GPIO_PIN_0 ) | (0x3 << GPIO_PIN_1 ) | (0x3 << GPIO_PIN_2 ) );
 8000524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8000532:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR    &= ~( (0x0 << GPIO_PIN_0 ) | (0x0 << GPIO_PIN_1 ) | (0x0 << GPIO_PIN_2 ) );
 8000534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000538:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	60d3      	str	r3, [r2, #12]
  GPIOA->MODER    |=  ( (0x0 << GPIO_PIN_0 ) | (0x0 << GPIO_PIN_1 ) | (0x0 << GPIO_PIN_2 ) );		// set to alt func mode
 8000540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000544:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR    |=  ( (0x1 << GPIO_PIN_0 ) | (0x1 << GPIO_PIN_1 ) | (0x1 << GPIO_PIN_2 ) );		// set gpio as input
 800054c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000556:	f043 0316 	orr.w	r3, r3, #22
 800055a:	60d3      	str	r3, [r2, #12]
   * - Circular mode
   * - Increment memory ptr, don't increment peripheral ptr
   * - Bit data size for both source and destination
   * - High priority
   */
  DMA1_Channel3->CCR &= ~( DMA_CCR_MEM2MEM |
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x124>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <main+0x124>)
 8000562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000566:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800056a:	6013      	str	r3, [r2, #0]
						   DMA_CCR_PL |
						   DMA_CCR_MSIZE |
						   DMA_CCR_PSIZE |
						   DMA_CCR_PINC |
						   DMA_CCR_EN );
  DMA1_Channel3->CCR |=  (( 0x2 << DMA_CCR_PL_Pos ) |
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0x124>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0x124>)
 8000572:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8000576:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800057a:	6013      	str	r3, [r2, #0]
						   DMA_CCR_MINC |
						   DMA_CCR_CIRC |
						   DMA_CCR_DIR );

  // Source: Address of the framebuffer.
  DMA1_Channel3->CMAR  = ( uint32_t )&COLORS;
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <main+0x124>)
 800057e:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <main+0x128>)
 8000580:	60da      	str	r2, [r3, #12]
  // Destination: SPI1 data register.
  DMA1_Channel3->CPAR  = ( uint32_t )&( SPI1->DR );
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <main+0x124>)
 8000584:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <main+0x12c>)
 8000586:	609a      	str	r2, [r3, #8]
  // Set DMA data transfer length (framebuffer length).
  DMA1_Channel3->CNDTR = ( uint16_t )LED_BYTES;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <main+0x124>)
 800058a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800058e:	605a      	str	r2, [r3, #4]
   * - MSB first
   * - 8-bit frames
   * - Baud rate prescaler of 8
   * - TX DMA requests enabled.
   */
  SPI1->CR1 &= ~( SPI_CR1_LSBFIRST |
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <main+0x130>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <main+0x130>)
 8000596:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800059a:	6013      	str	r3, [r2, #0]
				  SPI_CR1_BR );
  SPI1->CR1 |=  ( SPI_CR1_SSM |
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0x130>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <main+0x130>)
 80005a2:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	6013      	str	r3, [r2, #0]
				  SPI_CR1_SSI |
				  0x2 << SPI_CR1_BR_Pos |
				  SPI_CR1_MSTR |
				  SPI_CR1_CPOL |
				  SPI_CR1_CPHA );
  SPI1->CR2 &= ~( SPI_CR2_DS );
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <main+0x130>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <main+0x130>)
 80005b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005b6:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |=  ( 0x7 << SPI_CR2_DS_Pos |
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <main+0x130>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <main+0x130>)
 80005be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	6053      	str	r3, [r2, #4]
				  SPI_CR2_TXDMAEN );

  SPI1->CR1 |=  ( SPI_CR1_SPE );
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <main+0x130>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <main+0x130>)
 80005ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d2:	6013      	str	r3, [r2, #0]
  DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x124>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <main+0x124>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  reset_leds();
 80005e0:	f000 fb44 	bl	8000c6c <reset_leds>
//  srand(time(NULL));
  init_fire_effect();
 80005e4:	f000 fb76 	bl	8000cd4 <init_fire_effect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		set_fire_effect();
 80005e8:	f000 fb8e 	bl	8000d08 <set_fire_effect>
 80005ec:	e7fc      	b.n	80005e8 <main+0x11c>
 80005ee:	bf00      	nop
 80005f0:	40020030 	.word	0x40020030
 80005f4:	20000168 	.word	0x20000168
 80005f8:	4001300c 	.word	0x4001300c
 80005fc:	40013000 	.word	0x40013000

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0ac      	sub	sp, #176	; 0xb0
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800060a:	2244      	movs	r2, #68	; 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 ff4e 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2254      	movs	r2, #84	; 0x54
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff40 	bl	80034b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000638:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000650:	2313      	movs	r3, #19
 8000652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000656:	2307      	movs	r3, #7
 8000658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000662:	2306      	movs	r3, #6
 8000664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f8cf 	bl	8001810 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000678:	f000 f8d4 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000690:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fcda 	bl	8002050 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f8bf 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fed1 	bl	8002458 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 f8b2 	bl	8000824 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c4:	f001 f84e 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f8a9 	bl	8000824 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	37b0      	adds	r7, #176	; 0xb0
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_SPI1_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_SPI1_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_SPI1_Init+0x74>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_SPI1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x74>)
 80006f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x74>)
 80006fe:	2202      	movs	r2, #2
 8000700:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_SPI1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x74>)
 800070a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x74>)
 8000712:	2210      	movs	r2, #16
 8000714:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x74>)
 800072a:	2207      	movs	r2, #7
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x74>)
 8000736:	2208      	movs	r2, #8
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_SPI1_Init+0x74>)
 800073c:	f002 f96e 	bl	8002a1c <HAL_SPI_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 f86d 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000688 	.word	0x20000688
 8000754:	40013000 	.word	0x40013000

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 f9c8 	bl	8002b30 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f83d 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200006ec 	.word	0x200006ec
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x38>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200d      	movs	r0, #13
 80007dc:	f000 fcab 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007e0:	200d      	movs	r0, #13
 80007e2:	f000 fcc4 	bl	800116e <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_GPIO_Init+0x2c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MX_GPIO_Init+0x2c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_GPIO_Init+0x2c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a2c      	ldr	r2, [pc, #176]	; (800094c <HAL_SPI_MspInit+0xd0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d151      	bne.n	8000942 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a25      	ldr	r2, [pc, #148]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_SPI_MspInit+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80008ce:	2382      	movs	r3, #130	; 0x82
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fdc2 	bl	8001474 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_SPI_MspInit+0xdc>)
 80008f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 80008fe:	2210      	movs	r2, #16
 8000900:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 8000928:	f000 fc3c 	bl	80011a4 <HAL_DMA_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000932:	f7ff ff77 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 800093a:	655a      	str	r2, [r3, #84]	; 0x54
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <HAL_SPI_MspInit+0xd8>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013000 	.word	0x40013000
 8000950:	40021000 	.word	0x40021000
 8000954:	2000076c 	.word	0x2000076c
 8000958:	40020030 	.word	0x40020030

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x7c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d128      	bne.n	80009d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_UART_MspInit+0x80>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_UART_MspInit+0x80>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_UART_MspInit+0x80>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_MspInit+0x80>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_UART_MspInit+0x80>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_UART_MspInit+0x80>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ae:	230c      	movs	r3, #12
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009be:	2307      	movs	r3, #7
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fd52 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40004400 	.word	0x40004400
 80009dc:	40021000 	.word	0x40021000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 fa86 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <DMA1_Channel3_IRQHandler+0x10>)
 8000a42:	f000 fc67 	bl	8001314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000076c 	.word	0x2000076c

08000a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x50>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x16>
		heap_end = &end;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <_sbrk+0x50>)
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <_sbrk+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <_sbrk+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <_sbrk+0x50>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	466a      	mov	r2, sp
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d907      	bls.n	8000a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a7a:	f002 fcef 	bl	800345c <__errno>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	230c      	movs	r3, #12
 8000a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	e006      	b.n	8000a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_sbrk+0x50>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <_sbrk+0x50>)
 8000a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	200007c0 	.word	0x200007c0

08000aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <SystemInit+0x64>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <SystemInit+0x64>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <SystemInit+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <SystemInit+0x68>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <SystemInit+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <SystemInit+0x68>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <SystemInit+0x68>)
 8000ad4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ad8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <SystemInit+0x68>)
 8000ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <SystemInit+0x68>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <SystemInit+0x68>)
 8000aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <SystemInit+0x68>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SystemInit+0x64>)
 8000afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afe:	609a      	str	r2, [r3, #8]
#endif
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	40021000 	.word	0x40021000

08000b14 <delay_cycles>:
 *      Author: henryco1
 */
#include "ws2812b.h"

void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e003      	b.n	8000b2a <delay_cycles+0x16>
 8000b22:	bf00      	nop
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f7      	bcc.n	8000b22 <delay_cycles+0xe>
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <get_rgb_color>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

// Get a 32-bit representation of R/G/B colors.
uint32_t get_rgb_color( uint8_t r, uint8_t g, uint8_t b ) {
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	71bb      	strb	r3, [r7, #6]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	717b      	strb	r3, [r7, #5]
  return ( g << 16 | r << 8 | b );
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	041a      	lsls	r2, r3, #16
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	797b      	ldrb	r3, [r7, #5]
 8000b5c:	4313      	orrs	r3, r2
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <set_color>:
// Set an LED to an RGB color.
void set_color( size_t led_index, uint32_t col ) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  size_t led_base = led_index * 24;
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	613b      	str	r3, [r7, #16]
  uint8_t r = ( col >> 8 ) & 0xFF;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint8_t g = ( col >> 16 ) & 0xFF;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	73bb      	strb	r3, [r7, #14]
  uint8_t b = ( col ) & 0xFF;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	737b      	strb	r3, [r7, #13]
  for ( size_t i = 0; i < 8; ++i ) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	e019      	b.n	8000bcc <set_color+0x60>
    if ( g & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base ] = 0xF8; }
 8000b98:	7bba      	ldrb	r2, [r7, #14]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	f1c3 0307 	rsb	r3, r3, #7
 8000ba0:	fa42 f303 	asr.w	r3, r2, r3
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <set_color+0x4e>
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a2d      	ldr	r2, [pc, #180]	; (8000c68 <set_color+0xfc>)
 8000bb4:	21f8      	movs	r1, #248	; 0xf8
 8000bb6:	54d1      	strb	r1, [r2, r3]
 8000bb8:	e005      	b.n	8000bc6 <set_color+0x5a>
    else { COLORS[ i + led_base ] = 0xC0; }
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <set_color+0xfc>)
 8000bc2:	21c0      	movs	r1, #192	; 0xc0
 8000bc4:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	d9e2      	bls.n	8000b98 <set_color+0x2c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	e01b      	b.n	8000c10 <set_color+0xa4>
    if ( r & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 8 ] = 0xF8; }
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	f1c3 0307 	rsb	r3, r3, #7
 8000be0:	fa42 f303 	asr.w	r3, r2, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d007      	beq.n	8000bfc <set_color+0x90>
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <set_color+0xfc>)
 8000bf6:	21f8      	movs	r1, #248	; 0xf8
 8000bf8:	54d1      	strb	r1, [r2, r3]
 8000bfa:	e006      	b.n	8000c0a <set_color+0x9e>
    else { COLORS[ i + led_base + 8 ] = 0xC0; }
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4413      	add	r3, r2
 8000c02:	3308      	adds	r3, #8
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <set_color+0xfc>)
 8000c06:	21c0      	movs	r1, #192	; 0xc0
 8000c08:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d9e0      	bls.n	8000bd8 <set_color+0x6c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e01b      	b.n	8000c54 <set_color+0xe8>
    if ( b & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 16 ] = 0xF8; }
 8000c1c:	7b7a      	ldrb	r2, [r7, #13]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f1c3 0307 	rsb	r3, r3, #7
 8000c24:	fa42 f303 	asr.w	r3, r2, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d007      	beq.n	8000c40 <set_color+0xd4>
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	4413      	add	r3, r2
 8000c36:	3310      	adds	r3, #16
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <set_color+0xfc>)
 8000c3a:	21f8      	movs	r1, #248	; 0xf8
 8000c3c:	54d1      	strb	r1, [r2, r3]
 8000c3e:	e006      	b.n	8000c4e <set_color+0xe2>
    else { COLORS[ i + led_base + 16 ] = 0xC0; }
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4413      	add	r3, r2
 8000c46:	3310      	adds	r3, #16
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <set_color+0xfc>)
 8000c4a:	21c0      	movs	r1, #192	; 0xc0
 8000c4c:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d9e0      	bls.n	8000c1c <set_color+0xb0>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000168 	.word	0x20000168

08000c6c <reset_leds>:
    set_color( i, get_rgb_color( r, g, b ) );
  }
}

// reset leds
void reset_leds( void ) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	// Set initial colors to 'off'.
	for ( size_t i = 0; i < 300; ++i ) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	e00c      	b.n	8000c92 <reset_leds+0x26>
		set_color( i, get_rgb_color( 0x00, 0x00, 0x00 ) );
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff5e 	bl	8000b3e <get_rgb_color>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff70 	bl	8000b6c <set_color>
	for ( size_t i = 0; i < 300; ++i ) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c98:	d3ee      	bcc.n	8000c78 <reset_leds+0xc>
	}
	// Set the latching period to all 0s.
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 8000c9a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e007      	b.n	8000cb2 <reset_leds+0x46>
		COLORS[ i ] = 0x00;
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <reset_leds+0x60>)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8000cb8:	d3f3      	bcc.n	8000ca2 <reset_leds+0x36>
	}
	memset(frame_buf, 0, grid_x * grid_y * sizeof(unsigned int));
 8000cba:	22d0      	movs	r2, #208	; 0xd0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <reset_leds+0x64>)
 8000cc0:	f002 fbf6 	bl	80034b0 <memset>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000168 	.word	0x20000168
 8000cd0:	20000098 	.word	0x20000098

08000cd4 <init_fire_effect>:
/*
 * Initializes the frame buf so that the fire can start or be "ignited" from the bottom row of the grid
 * The initial value of the bottom row should be brightest element from the fire color array.
 * By default, the fire color array is sorted from darkest to lightest in ascending order.
 */
void init_fire_effect(void) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
    for (int i=0; i<grid_x; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e008      	b.n	8000cf2 <init_fire_effect+0x1e>
        frame_buf[(grid_y-1) * grid_x + i] = 10;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3330      	adds	r3, #48	; 0x30
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <init_fire_effect+0x30>)
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i=0; i<grid_x; i++) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	ddf3      	ble.n	8000ce0 <init_fire_effect+0xc>
    }
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	20000098 	.word	0x20000098

08000d08 <set_fire_effect>:
 * 1. generating a fire model using a 2d array
 * 2. use the fire model to generate color data for the LEDs
 *
 * fire effect based on this gradient https://www.schemecolor.com/fire-gradient.php
 */
void set_fire_effect(void) {
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
	 * gradient table organize in a "fire" pattern
	 * note that my LEDs might be damaged so the color table might be off
	 *
	 * https://meyerweb.com/eric/tools/color-blend/#FFCC66:FF6600:10:rgbd
	 */
	uint8_t fire_colors[14][3] = {
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <set_fire_effect+0x134>)
 8000d10:	1d3c      	adds	r4, r7, #4
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d20:	c403      	stmia	r4!, {r0, r1}
 8000d22:	8022      	strh	r2, [r4, #0]
	 * This code ignites the flame from the bottom row. The bottom array needs to be initialized from init_fire_effect().
	 * The r_val_spread variable is needed for a fire flickering effect.
	 * An r_val_spread factor value of 1 means no spread. Higher values increased the spread.
	 * Adjust r_val_height to control the height of the embers in the fire. Lower this value to decrease the height
	 */
	int r_val_spread = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
	int r_val_spread_factor = 4; // 3
 8000d28:	2304      	movs	r3, #4
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int r_val_height = 3; // 3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int x = 0; x < grid_x; x++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d34:	e038      	b.n	8000da8 <set_fire_effect+0xa0>
        for (int y = 1; y < grid_y; y++) {
 8000d36:	2301      	movs	r3, #1
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d3a:	e02f      	b.n	8000d9c <set_fire_effect+0x94>
        	r_val_spread = (rand() % r_val_spread_factor );
 8000d3c:	f002 fbc0 	bl	80034c0 <rand>
 8000d40:	4603      	mov	r3, r0
 8000d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d44:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d4a:	fb01 f202 	mul.w	r2, r1, r2
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
            int prev = y * grid_x + x;
 8000d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d58:	4413      	add	r3, r2
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
            int curr = prev - grid_x;
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
            frame_buf[curr] = abs(frame_buf[prev] - 1 - (r_val_spread & ((rand() % r_val_height) )));
 8000d62:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <set_fire_effect+0x138>)
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d6a:	f002 fba9 	bl	80034c0 <rand>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d72:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d78:	fb01 f202 	mul.w	r2, r1, r2
 8000d7c:	1a9a      	subs	r2, r3, r2
 8000d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d80:	4013      	ands	r3, r2
 8000d82:	1ae3      	subs	r3, r4, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bfb8      	it	lt
 8000d8a:	425b      	neglt	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <set_fire_effect+0x138>)
 8000d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int y = 1; y < grid_y; y++) {
 8000d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d98:	3301      	adds	r3, #1
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	ddcc      	ble.n	8000d3c <set_fire_effect+0x34>
    for (int x = 0; x < grid_x; x++) {
 8000da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da4:	3301      	adds	r3, #1
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	ddc3      	ble.n	8000d36 <set_fire_effect+0x2e>
        }
    }

    // input the 2d fire model into the LEDs
    for (int i=0; i<NUM_LEDS; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
 8000db2:	e038      	b.n	8000e26 <set_fire_effect+0x11e>
    	set_color(i, get_rgb_color(gamma_table[fire_colors[frame_buf[i]][0]], gamma_table[fire_colors[frame_buf[i]][1]], gamma_table[fire_colors[frame_buf[i]][2]]));
 8000db4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000db6:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <set_fire_effect+0x138>)
 8000db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b4c      	subs	r3, #76	; 0x4c
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <set_fire_effect+0x13c>)
 8000dd2:	5c98      	ldrb	r0, [r3, r2]
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <set_fire_effect+0x138>)
 8000dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000de6:	4413      	add	r3, r2
 8000de8:	3b4b      	subs	r3, #75	; 0x4b
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <set_fire_effect+0x13c>)
 8000df0:	5c99      	ldrb	r1, [r3, r2]
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <set_fire_effect+0x138>)
 8000df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000e04:	4413      	add	r3, r2
 8000e06:	3b4a      	subs	r3, #74	; 0x4a
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <set_fire_effect+0x13c>)
 8000e0e:	5c9b      	ldrb	r3, [r3, r2]
 8000e10:	461a      	mov	r2, r3
 8000e12:	f7ff fe94 	bl	8000b3e <get_rgb_color>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fea6 	bl	8000b6c <set_color>
    for (int i=0; i<NUM_LEDS; i++) {
 8000e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e22:	3301      	adds	r3, #1
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
 8000e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e28:	2b33      	cmp	r3, #51	; 0x33
 8000e2a:	ddc3      	ble.n	8000db4 <set_fire_effect+0xac>
    }
	delay_cycles( 500000 );
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <set_fire_effect+0x140>)
 8000e2e:	f7ff fe71 	bl	8000b14 <delay_cycles>
}
 8000e32:	bf00      	nop
 8000e34:	3750      	adds	r7, #80	; 0x50
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08003628 	.word	0x08003628
 8000e40:	20000098 	.word	0x20000098
 8000e44:	0800369c 	.word	0x0800369c
 8000e48:	0007a120 	.word	0x0007a120

08000e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
	ldr	r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <LoopForever+0x16>)
	cmp	r2, r3
 8000e72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e76:	f7ff fe17 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 faf5 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7e:	f7ff fb25 	bl	80004cc <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e88:	080037ac 	.word	0x080037ac
	ldr	r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e90:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e94:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e98:	200007bc 	.word	0x200007bc

08000e9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_IRQHandler>

08000e9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f939 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f80e 	bl	8000ed0 <HAL_InitTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e001      	b.n	8000ec4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec0:	f7ff fcb8 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_InitTick+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d022      	beq.n	8000f2a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_InitTick+0x6c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_InitTick+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f946 	bl	800118a <HAL_SYSTICK_Config>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10f      	bne.n	8000f24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d809      	bhi.n	8000f1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f12:	f000 f910 	bl	8001136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_InitTick+0x70>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e004      	b.n	8000f2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e001      	b.n	8000f2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	200007b4 	.word	0x200007b4
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200007b4 	.word	0x200007b4

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e098      	b.n	80012e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_DMA_Init+0x150>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d80f      	bhi.n	80011e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_DMA_Init+0x154>)
 80011ca:	4413      	add	r3, r2
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_DMA_Init+0x158>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	009a      	lsls	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_DMA_Init+0x15c>)
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
 80011e0:	e00e      	b.n	8001200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <HAL_DMA_Init+0x160>)
 80011ea:	4413      	add	r3, r2
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_DMA_Init+0x158>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a42      	ldr	r2, [pc, #264]	; (8001308 <HAL_DMA_Init+0x164>)
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800121a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800125a:	d039      	beq.n	80012d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_DMA_Init+0x15c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11a      	bne.n	800129c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_DMA_Init+0x168>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 031c 	and.w	r3, r3, #28
 8001272:	210f      	movs	r1, #15
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <HAL_DMA_Init+0x168>)
 800127c:	4013      	ands	r3, r2
 800127e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_DMA_Init+0x168>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 031c 	and.w	r3, r3, #28
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	491d      	ldr	r1, [pc, #116]	; (800130c <HAL_DMA_Init+0x168>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
 800129a:	e019      	b.n	80012d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_DMA_Init+0x16c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 031c 	and.w	r3, r3, #28
 80012a8:	210f      	movs	r1, #15
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	4917      	ldr	r1, [pc, #92]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 031c 	and.w	r3, r3, #28
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	4911      	ldr	r1, [pc, #68]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40020407 	.word	0x40020407
 80012f8:	bffdfff8 	.word	0xbffdfff8
 80012fc:	cccccccd 	.word	0xcccccccd
 8001300:	40020000 	.word	0x40020000
 8001304:	bffdfbf8 	.word	0xbffdfbf8
 8001308:	40020400 	.word	0x40020400
 800130c:	400200a8 	.word	0x400200a8
 8001310:	400204a8 	.word	0x400204a8

08001314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	f003 031c 	and.w	r3, r3, #28
 8001334:	2204      	movs	r2, #4
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d026      	beq.n	800138e <HAL_DMA_IRQHandler+0x7a>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	d021      	beq.n	800138e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0204 	bic.w	r2, r2, #4
 8001366:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f003 021c 	and.w	r2, r3, #28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	2104      	movs	r1, #4
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	2b00      	cmp	r3, #0
 8001382:	d071      	beq.n	8001468 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800138c:	e06c      	b.n	8001468 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 031c 	and.w	r3, r3, #28
 8001396:	2202      	movs	r2, #2
 8001398:	409a      	lsls	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02e      	beq.n	8001400 <HAL_DMA_IRQHandler+0xec>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d029      	beq.n	8001400 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10b      	bne.n	80013d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020a 	bic.w	r2, r2, #10
 80013c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 021c 	and.w	r2, r3, #28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2102      	movs	r1, #2
 80013e0:	fa01 f202 	lsl.w	r2, r1, r2
 80013e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d038      	beq.n	8001468 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013fe:	e033      	b.n	8001468 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 031c 	and.w	r3, r3, #28
 8001408:	2208      	movs	r2, #8
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02a      	beq.n	800146a <HAL_DMA_IRQHandler+0x156>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d025      	beq.n	800146a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 020e 	bic.w	r2, r2, #14
 800142c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f003 021c 	and.w	r2, r3, #28
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001468:	bf00      	nop
 800146a:	bf00      	nop
}
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e148      	b.n	8001716 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 813a 	beq.w	8001710 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d00b      	beq.n	80014bc <HAL_GPIO_Init+0x48>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0xea>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b12      	cmp	r3, #18
 800155c:	d123      	bne.n	80015a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8094 	beq.w	8001710 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	4a51      	ldr	r2, [pc, #324]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6613      	str	r3, [r2, #96]	; 0x60
 80015f4:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x2c4>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1d4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a43      	ldr	r2, [pc, #268]	; (800173c <HAL_GPIO_Init+0x2c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1d0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a42      	ldr	r2, [pc, #264]	; (8001740 <HAL_GPIO_Init+0x2cc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1cc>
 800163c:	2302      	movs	r3, #2
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001640:	2307      	movs	r3, #7
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165a:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x2c4>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800168c:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f aeaf 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <HAL_PWREx_GetVoltageRange+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001772:	d130      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d038      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2232      	movs	r2, #50	; 0x32
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a8:	e002      	b.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d102      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f2      	bne.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d0:	d110      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e00f      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d007      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f000 bc11 	b.w	8002046 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001824:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80e4 	beq.w	8001a0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_RCC_OscConfig+0x4c>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	f040 808b 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 8087 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x64>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e3e8      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_RCC_OscConfig+0x7e>
 8001884:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188c:	e005      	b.n	800189a <HAL_RCC_OscConfig+0x8a>
 800188e:	4b86      	ldr	r3, [pc, #536]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189a:	4293      	cmp	r3, r2
 800189c:	d223      	bcs.n	80018e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fd78 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3c9      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b2:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7c      	ldr	r2, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4977      	ldr	r1, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4972      	ldr	r1, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e025      	b.n	8001932 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	496a      	ldr	r1, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	4965      	ldr	r1, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd38 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e389      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001932:	f000 fc6f 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8001936:	4601      	mov	r1, r0
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x29c>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	fa21 f303 	lsr.w	r3, r1, r3
 800194e:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x2a0>)
 8001950:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x2a4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff faba 	bl	8000ed0 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d052      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	e36d      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d032      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197e:	f7ff faf3 	bl	8000f68 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001986:	f7ff faef 	bl	8000f68 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e356      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	493a      	ldr	r1, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e01a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fac0 	bl	8000f68 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff fabc 	bl	8000f68 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e323      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1dc>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d073      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x21c>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d063      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d15f      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e300      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x24c>
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0x288>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x270>
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x288>
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d01b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa62 	bl	8000f68 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e010      	b.n	8001aca <HAL_RCC_OscConfig+0x2ba>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08003654 	.word	0x08003654
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fa56 	bl	8000f68 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e2bd      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	4baf      	ldr	r3, [pc, #700]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2a8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa46 	bl	8000f68 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fa42 	bl	8000f68 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2a9      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	4ba5      	ldr	r3, [pc, #660]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d0>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d060      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x310>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e286      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b93      	ldr	r3, [pc, #588]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	4990      	ldr	r1, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	e040      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a8b      	ldr	r2, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fa01 	bl	8000f68 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f9fd 	bl	8000f68 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e264      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	497c      	ldr	r1, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a79      	ldr	r2, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f9dd 	bl	8000f68 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f9d9 	bl	8000f68 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e240      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9b8 	bl	8000f68 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f9b4 	bl	8000f68 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e21b      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3ec>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f99b 	bl	8000f68 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f997 	bl	8000f68 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1fe      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a6 	beq.w	8001db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a43      	ldr	r2, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3a      	ldr	r2, [pc, #232]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f95e 	bl	8000f68 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff f95a 	bl	8000f68 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1c1      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d8>
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce6:	e024      	b.n	8001d32 <HAL_RCC_OscConfig+0x522>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d110      	bne.n	8001d12 <HAL_RCC_OscConfig+0x502>
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d10:	e00f      	b.n	8001d32 <HAL_RCC_OscConfig+0x522>
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f915 	bl	8000f68 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f911 	bl	8000f68 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e176      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ed      	beq.n	8001d42 <HAL_RCC_OscConfig+0x532>
 8001d66:	e01a      	b.n	8001d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f8fe 	bl	8000f68 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff f8fa 	bl	8000f68 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d906      	bls.n	8001d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e15f      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d90:	4baa      	ldr	r3, [pc, #680]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e8      	bne.n	8001d70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4ba5      	ldr	r3, [pc, #660]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4aa4      	ldr	r2, [pc, #656]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d03c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dc4:	4b9d      	ldr	r3, [pc, #628]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dca:	4a9c      	ldr	r2, [pc, #624]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f8c8 	bl	8000f68 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ddc:	f7ff f8c4 	bl	8000f68 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e12b      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dee:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ef      	beq.n	8001ddc <HAL_RCC_OscConfig+0x5cc>
 8001dfc:	e01b      	b.n	8001e36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dfe:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e04:	4a8d      	ldr	r2, [pc, #564]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f8ab 	bl	8000f68 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7ff f8a7 	bl	8000f68 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e10e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e28:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ef      	bne.n	8001e16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8102 	beq.w	8002044 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	f040 80c5 	bne.w	8001fd4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d123      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d113      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d109      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d067      	beq.n	8001f88 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d062      	beq.n	8001f84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0bb      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eda:	f7ff f845 	bl	8000f68 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f841 	bl	8000f68 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0a8      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_RCC_OscConfig+0x830>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1a:	0212      	lsls	r2, r2, #8
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f22:	0852      	lsrs	r2, r2, #1
 8001f24:	3a01      	subs	r2, #1
 8001f26:	0552      	lsls	r2, r2, #21
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0652      	lsls	r2, r2, #25
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f3a:	06d2      	lsls	r2, r2, #27
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	493f      	ldr	r1, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3c      	ldr	r2, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f50:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7ff f804 	bl	8000f68 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f800 	bl	8000f68 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e067      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	e05f      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e05e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fac:	f7fe ffdc 	bl	8000f68 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ffd8 	bl	8000f68 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03f      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x7a4>
 8001fd2:	e037      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d02d      	beq.n	8002036 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002004:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe ffab 	bl	8000f68 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe ffa7 	bl	8000f68 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e00e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x806>
 8002034:	e006      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e005      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0c8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4961      	ldr	r1, [pc, #388]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d04c      	beq.n	800213a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a8:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e09e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d115      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e092      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e086      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e07e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	493f      	ldr	r1, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210a:	f7fe ff2d 	bl	8000f68 <HAL_GetTick>
 800210e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e00a      	b.n	8002128 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe ff29 	bl	8000f68 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e066      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 020c 	and.w	r2, r3, #12
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	429a      	cmp	r2, r3
 8002138:	d1eb      	bne.n	8002112 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4924      	ldr	r1, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e036      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4918      	ldr	r1, [pc, #96]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4910      	ldr	r1, [pc, #64]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c6:	f000 f825 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa21 f303 	lsr.w	r3, r1, r3
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fe70 	bl	8000ed0 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	08003654 	.word	0x08003654
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d121      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11e      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002284:	e00a      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d102      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_GetSysClockFreq+0x10c>)
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e004      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d101      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 800229a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d133      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0xaa>
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ba:	617b      	str	r3, [r7, #20]
      break;
 80022bc:	e005      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 80022c0:	617b      	str	r3, [r7, #20]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	617b      	str	r3, [r7, #20]
      break;
 80022c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	3301      	adds	r3, #1
 80022d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	fb02 f203 	mul.w	r2, r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_GetSysClockFreq+0x104>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0e5b      	lsrs	r3, r3, #25
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800230a:	69bb      	ldr	r3, [r7, #24]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3724      	adds	r7, #36	; 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000
 800231c:	0800366c 	.word	0x0800366c
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_RCC_GetHCLKFreq+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000000 	.word	0x20000000

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002344:	f7ff fff0 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002348:	4601      	mov	r1, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08003664 	.word	0x08003664

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002370:	f7ff ffda 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002374:	4601      	mov	r1, r0
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	08003664 	.word	0x08003664

08002398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f9ca 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
 80023b6:	e014      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	; 0x58
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff f9ba 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d10b      	bne.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d919      	bls.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2ba0      	cmp	r3, #160	; 0xa0
 80023f4:	d902      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e013      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e010      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d902      	bls.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002408:	2303      	movs	r3, #3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e00a      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d102      	bne.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e004      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d101      	bne.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4909      	ldr	r1, [pc, #36]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002460:	2300      	movs	r3, #0
 8002462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002464:	2300      	movs	r3, #0
 8002466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800247c:	d005      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800247e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002488:	e00f      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4aab      	ldr	r2, [pc, #684]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002496:	e00c      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f9cc 	bl	800283c <RCCEx_PLLSAI1_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a8:	e003      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	74fb      	strb	r3, [r7, #19]
      break;
 80024ae:	e000      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80024b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b8:	4ba0      	ldr	r3, [pc, #640]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	499d      	ldr	r1, [pc, #628]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ce:	e001      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8099 	beq.w	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024e6:	4b95      	ldr	r3, [pc, #596]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a8e      	ldr	r2, [pc, #568]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002518:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a88      	ldr	r2, [pc, #544]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002524:	f7fe fd20 	bl	8000f68 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252a:	e009      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252c:	f7fe fd1c 	bl	8000f68 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	74fb      	strb	r3, [r7, #19]
        break;
 800253e:	e005      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002540:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d155      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002552:	4b7a      	ldr	r3, [pc, #488]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01e      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	429a      	cmp	r2, r3
 800256c:	d019      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800259a:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d016      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fcdc 	bl	8000f68 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	e00b      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fcd8 	bl	8000f68 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d902      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	74fb      	strb	r3, [r7, #19]
            break;
 80025ca:	e006      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025cc:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ec      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	4953      	ldr	r1, [pc, #332]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025f6:	e004      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
 80025fc:	e001      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800260e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002620:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4943      	ldr	r1, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 020c 	bic.w	r2, r3, #12
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	493a      	ldr	r1, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	4932      	ldr	r1, [pc, #200]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	4929      	ldr	r1, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4921      	ldr	r1, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4910      	ldr	r1, [pc, #64]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02c      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d10a      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a02      	ldr	r2, [pc, #8]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002738:	60d3      	str	r3, [r2, #12]
 800273a:	e015      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f871 	bl	800283c <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d028      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	492d      	ldr	r1, [pc, #180]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002792:	d106      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e011      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f842 	bl	800283c <RCCEx_PLLSAI1_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	4915      	ldr	r1, [pc, #84]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2102      	movs	r1, #2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f81f 	bl	800283c <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800282e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
       ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d044      	beq.n	800290c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e041      	b.n	800290c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d00c      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x6e>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d013      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x80>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d120      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002898:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e01a      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ba:	e013      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10f      	bne.n	80028e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d8:	e006      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      break;
 80028de:	e004      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028e0:	bf00      	nop
 80028e2:	e002      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028e4:	bf00      	nop
 80028e6:	e000      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	430b      	orrs	r3, r1
 8002906:	4944      	ldr	r1, [pc, #272]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d17c      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800291c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291e:	f7fe fb23 	bl	8000f68 <HAL_GetTick>
 8002922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002924:	e009      	b.n	800293a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002926:	f7fe fb1f 	bl	8000f68 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d902      	bls.n	800293a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	73fb      	strb	r3, [r7, #15]
        break;
 8002938:	e005      	b.n	8002946 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d15f      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d110      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800295a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	0211      	lsls	r1, r2, #8
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68d2      	ldr	r2, [r2, #12]
 8002968:	06d2      	lsls	r2, r2, #27
 800296a:	430a      	orrs	r2, r1
 800296c:	492a      	ldr	r1, [pc, #168]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	610b      	str	r3, [r1, #16]
 8002972:	e027      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d112      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	0211      	lsls	r1, r2, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6912      	ldr	r2, [r2, #16]
 8002990:	0852      	lsrs	r2, r2, #1
 8002992:	3a01      	subs	r2, #1
 8002994:	0552      	lsls	r2, r2, #21
 8002996:	430a      	orrs	r2, r1
 8002998:	491f      	ldr	r1, [pc, #124]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
 800299e:	e011      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6952      	ldr	r2, [r2, #20]
 80029b6:	0852      	lsrs	r2, r2, #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0652      	lsls	r2, r2, #25
 80029bc:	430a      	orrs	r2, r1
 80029be:	4916      	ldr	r1, [pc, #88]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe faca 	bl	8000f68 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d6:	e009      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d8:	f7fe fac6 	bl	8000f68 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	73fb      	strb	r3, [r7, #15]
          break;
 80029ea:	e005      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4904      	ldr	r1, [pc, #16]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07c      	b.n	8002b28 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fd ff17 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a6e:	d902      	bls.n	8002a76 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e002      	b.n	8002a7c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a84:	d007      	beq.n	8002a96 <HAL_SPI_Init+0x7a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a8e:	d002      	beq.n	8002a96 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa6:	d903      	bls.n	8002ab0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
 8002aae:	e002      	b.n	8002ab6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0204 	and.w	r2, r3, #4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	ea42 0103 	orr.w	r1, r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e040      	b.n	8002bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd ff02 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f82c 	bl	8002bcc <UART_SetConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fb06 	bl	8003198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fb8d 	bl	80032dc <UART_CheckIdleState>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4bb3      	ldr	r3, [pc, #716]	; (8002ed0 <UART_SetConfig+0x304>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4aa9      	ldr	r2, [pc, #676]	; (8002ed4 <UART_SetConfig+0x308>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4aa0      	ldr	r2, [pc, #640]	; (8002ed8 <UART_SetConfig+0x30c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d126      	bne.n	8002caa <UART_SetConfig+0xde>
 8002c5c:	4b9f      	ldr	r3, [pc, #636]	; (8002edc <UART_SetConfig+0x310>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d81a      	bhi.n	8002ca0 <UART_SetConfig+0xd4>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <UART_SetConfig+0xa4>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c91 	.word	0x08002c91
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c99 	.word	0x08002c99
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c86:	e080      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8e:	e07c      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002c90:	2304      	movs	r3, #4
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c96:	e078      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002c98:	2308      	movs	r3, #8
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9e:	e074      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca6:	bf00      	nop
 8002ca8:	e06f      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a8c      	ldr	r2, [pc, #560]	; (8002ee0 <UART_SetConfig+0x314>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d138      	bne.n	8002d26 <UART_SetConfig+0x15a>
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <UART_SetConfig+0x310>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d82c      	bhi.n	8002d1c <UART_SetConfig+0x150>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <UART_SetConfig+0xfc>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cfd 	.word	0x08002cfd
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002d1d 	.word	0x08002d1d
 8002cd4:	08002d1d 	.word	0x08002d1d
 8002cd8:	08002d0d 	.word	0x08002d0d
 8002cdc:	08002d1d 	.word	0x08002d1d
 8002ce0:	08002d1d 	.word	0x08002d1d
 8002ce4:	08002d1d 	.word	0x08002d1d
 8002ce8:	08002d05 	.word	0x08002d05
 8002cec:	08002d1d 	.word	0x08002d1d
 8002cf0:	08002d1d 	.word	0x08002d1d
 8002cf4:	08002d1d 	.word	0x08002d1d
 8002cf8:	08002d15 	.word	0x08002d15
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d02:	e042      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d04:	2302      	movs	r3, #2
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0a:	e03e      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d12:	e03a      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d14:	2308      	movs	r3, #8
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1a:	e036      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d22:	bf00      	nop
 8002d24:	e031      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <UART_SetConfig+0x308>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d129      	bne.n	8002d84 <UART_SetConfig+0x1b8>
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <UART_SetConfig+0x310>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d014      	beq.n	8002d6a <UART_SetConfig+0x19e>
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d802      	bhi.n	8002d4c <UART_SetConfig+0x180>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <UART_SetConfig+0x18e>
 8002d4a:	e016      	b.n	8002d7a <UART_SetConfig+0x1ae>
 8002d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d50:	d007      	beq.n	8002d62 <UART_SetConfig+0x196>
 8002d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d56:	d00c      	beq.n	8002d72 <UART_SetConfig+0x1a6>
 8002d58:	e00f      	b.n	8002d7a <UART_SetConfig+0x1ae>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d60:	e013      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d62:	2302      	movs	r3, #2
 8002d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d68:	e00f      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d70:	e00b      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d72:	2308      	movs	r3, #8
 8002d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d78:	e007      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d80:	bf00      	nop
 8002d82:	e002      	b.n	8002d8a <UART_SetConfig+0x1be>
 8002d84:	2310      	movs	r3, #16
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a51      	ldr	r2, [pc, #324]	; (8002ed4 <UART_SetConfig+0x308>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f040 80fa 	bne.w	8002f8a <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d823      	bhi.n	8002de6 <UART_SetConfig+0x21a>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <UART_SetConfig+0x1d8>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002dc9 	.word	0x08002dc9
 8002da8:	08002de7 	.word	0x08002de7
 8002dac:	08002dd1 	.word	0x08002dd1
 8002db0:	08002de7 	.word	0x08002de7
 8002db4:	08002dd7 	.word	0x08002dd7
 8002db8:	08002de7 	.word	0x08002de7
 8002dbc:	08002de7 	.word	0x08002de7
 8002dc0:	08002de7 	.word	0x08002de7
 8002dc4:	08002ddf 	.word	0x08002ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f7ff faba 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dce:	e00d      	b.n	8002dec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002dd0:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <UART_SetConfig+0x318>)
 8002dd2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dd4:	e00a      	b.n	8002dec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002dd6:	f7ff fa1d 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002dda:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ddc:	e006      	b.n	8002dec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002de4:	e002      	b.n	8002dec <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	76fb      	strb	r3, [r7, #27]
        break;
 8002dea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 81c6 	beq.w	8003180 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d305      	bcc.n	8002e10 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d902      	bls.n	8002e16 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e1b4      	b.n	8003180 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8002e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	f200 80a2 	bhi.w	8002f64 <UART_SetConfig+0x398>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0x25c>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002f65 	.word	0x08002f65
 8002e30:	08002e9b 	.word	0x08002e9b
 8002e34:	08002f65 	.word	0x08002f65
 8002e38:	08002eed 	.word	0x08002eed
 8002e3c:	08002f65 	.word	0x08002f65
 8002e40:	08002f65 	.word	0x08002f65
 8002e44:	08002f65 	.word	0x08002f65
 8002e48:	08002f3b 	.word	0x08002f3b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f7ff fa78 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8002e50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0214      	lsls	r4, r2, #8
 8002e64:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e68:	020b      	lsls	r3, r1, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6852      	ldr	r2, [r2, #4]
 8002e6e:	0852      	lsrs	r2, r2, #1
 8002e70:	4611      	mov	r1, r2
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	eb13 0b01 	adds.w	fp, r3, r1
 8002e7a:	eb44 0c02 	adc.w	ip, r4, r2
 8002e7e:	4658      	mov	r0, fp
 8002e80:	4661      	mov	r1, ip
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	f7fd f99d 	bl	80001cc <__aeabi_uldivmod>
 8002e92:	4603      	mov	r3, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e98:	e067      	b.n	8002f6a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	4910      	ldr	r1, [pc, #64]	; (8002ee8 <UART_SetConfig+0x31c>)
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	eb13 0b01 	adds.w	fp, r3, r1
 8002eae:	eb44 0c02 	adc.w	ip, r4, r2
 8002eb2:	4658      	mov	r0, fp
 8002eb4:	4661      	mov	r1, ip
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f04f 0400 	mov.w	r4, #0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	f7fd f983 	bl	80001cc <__aeabi_uldivmod>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ecc:	e04d      	b.n	8002f6a <UART_SetConfig+0x39e>
 8002ece:	bf00      	nop
 8002ed0:	efff69f3 	.word	0xefff69f3
 8002ed4:	40008000 	.word	0x40008000
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	00f42400 	.word	0x00f42400
 8002ee8:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002eec:	f7ff f992 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002ef0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	0214      	lsls	r4, r2, #8
 8002f04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f08:	020b      	lsls	r3, r1, #8
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6852      	ldr	r2, [r2, #4]
 8002f0e:	0852      	lsrs	r2, r2, #1
 8002f10:	4611      	mov	r1, r2
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	eb13 0b01 	adds.w	fp, r3, r1
 8002f1a:	eb44 0c02 	adc.w	ip, r4, r2
 8002f1e:	4658      	mov	r0, fp
 8002f20:	4661      	mov	r1, ip
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	f7fd f94d 	bl	80001cc <__aeabi_uldivmod>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f38:	e017      	b.n	8002f6a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f48:	f144 0100 	adc.w	r1, r4, #0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f04f 0400 	mov.w	r4, #0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	f7fd f938 	bl	80001cc <__aeabi_uldivmod>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f62:	e002      	b.n	8002f6a <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	76fb      	strb	r3, [r7, #27]
            break;
 8002f68:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f70:	d308      	bcc.n	8002f84 <UART_SetConfig+0x3b8>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f78:	d204      	bcs.n	8002f84 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e0fd      	b.n	8003180 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	e0fa      	b.n	8003180 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f92:	f040 8083 	bne.w	800309c <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8002f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d85e      	bhi.n	800305c <UART_SetConfig+0x490>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <UART_SetConfig+0x3d8>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fc9 	.word	0x08002fc9
 8002fa8:	08002fe9 	.word	0x08002fe9
 8002fac:	08003009 	.word	0x08003009
 8002fb0:	0800305d 	.word	0x0800305d
 8002fb4:	08003025 	.word	0x08003025
 8002fb8:	0800305d 	.word	0x0800305d
 8002fbc:	0800305d 	.word	0x0800305d
 8002fc0:	0800305d 	.word	0x0800305d
 8002fc4:	08003045 	.word	0x08003045
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f7ff f9ba 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	005a      	lsls	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fe6:	e03c      	b.n	8003062 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7ff f9c0 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8002fec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003006:	e02c      	b.n	8003062 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003012:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6852      	ldr	r2, [r2, #4]
 800301a:	fbb3 f3f2 	udiv	r3, r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003022:	e01e      	b.n	8003062 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003024:	f7ff f8f6 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8003028:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	005a      	lsls	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003042:	e00e      	b.n	8003062 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800305a:	e002      	b.n	8003062 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	76fb      	strb	r3, [r7, #27]
        break;
 8003060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d916      	bls.n	8003096 <UART_SetConfig+0x4ca>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306e:	d212      	bcs.n	8003096 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f023 030f 	bic.w	r3, r3, #15
 8003078:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	b29a      	uxth	r2, r3
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	4313      	orrs	r3, r2
 800308a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	89fa      	ldrh	r2, [r7, #14]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	e074      	b.n	8003180 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	76fb      	strb	r3, [r7, #27]
 800309a:	e071      	b.n	8003180 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 800309c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d85c      	bhi.n	800315e <UART_SetConfig+0x592>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0x4e0>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030d1 	.word	0x080030d1
 80030b0:	080030ef 	.word	0x080030ef
 80030b4:	0800310d 	.word	0x0800310d
 80030b8:	0800315f 	.word	0x0800315f
 80030bc:	08003129 	.word	0x08003129
 80030c0:	0800315f 	.word	0x0800315f
 80030c4:	0800315f 	.word	0x0800315f
 80030c8:	0800315f 	.word	0x0800315f
 80030cc:	08003147 	.word	0x08003147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7ff f936 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 80030d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085a      	lsrs	r2, r3, #1
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030ec:	e03a      	b.n	8003164 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030ee:	f7ff f93d 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 80030f2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	085a      	lsrs	r2, r3, #1
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800310a:	e02b      	b.n	8003164 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003116:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6852      	ldr	r2, [r2, #4]
 800311e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003126:	e01d      	b.n	8003164 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003128:	f7ff f874 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 800312c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	085a      	lsrs	r2, r3, #1
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	b29b      	uxth	r3, r3
 8003142:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003144:	e00e      	b.n	8003164 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	b29b      	uxth	r3, r3
 800315a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800315c:	e002      	b.n	8003164 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	76fb      	strb	r3, [r7, #27]
        break;
 8003162:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	d908      	bls.n	800317c <UART_SetConfig+0x5b0>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d204      	bcs.n	800317c <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e001      	b.n	8003180 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800318c:	7efb      	ldrb	r3, [r7, #27]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d10a      	bne.n	80032ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032ea:	f7fd fe3d 	bl	8000f68 <HAL_GetTick>
 80032ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d10e      	bne.n	800331c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f82a 	bl	8003366 <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e020      	b.n	800335e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d10e      	bne.n	8003348 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f814 	bl	8003366 <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00a      	b.n	800335e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003376:	e05d      	b.n	8003434 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d059      	beq.n	8003434 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fd fdf2 	bl	8000f68 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <UART_WaitOnFlagUntilTimeout+0x30>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11b      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e042      	b.n	8003454 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02b      	beq.n	8003434 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ea:	d123      	bne.n	8003434 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003404:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e00f      	b.n	8003454 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d092      	beq.n	8003378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <__errno>:
 800345c:	4b01      	ldr	r3, [pc, #4]	; (8003464 <__errno+0x8>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000000c 	.word	0x2000000c

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	4e0d      	ldr	r6, [pc, #52]	; (80034a0 <__libc_init_array+0x38>)
 800346c:	4c0d      	ldr	r4, [pc, #52]	; (80034a4 <__libc_init_array+0x3c>)
 800346e:	1ba4      	subs	r4, r4, r6
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	2500      	movs	r5, #0
 8003474:	42a5      	cmp	r5, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	4e0b      	ldr	r6, [pc, #44]	; (80034a8 <__libc_init_array+0x40>)
 800347a:	4c0c      	ldr	r4, [pc, #48]	; (80034ac <__libc_init_array+0x44>)
 800347c:	f000 f8c8 	bl	8003610 <_init>
 8003480:	1ba4      	subs	r4, r4, r6
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	2500      	movs	r5, #0
 8003486:	42a5      	cmp	r5, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003490:	4798      	blx	r3
 8003492:	3501      	adds	r5, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800349a:	4798      	blx	r3
 800349c:	3501      	adds	r5, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	080037a4 	.word	0x080037a4
 80034a4:	080037a4 	.word	0x080037a4
 80034a8:	080037a4 	.word	0x080037a4
 80034ac:	080037a8 	.word	0x080037a8

080034b0 <memset>:
 80034b0:	4402      	add	r2, r0
 80034b2:	4603      	mov	r3, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <rand>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <rand+0x50>)
 80034c4:	681c      	ldr	r4, [r3, #0]
 80034c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034c8:	b97b      	cbnz	r3, 80034ea <rand+0x2a>
 80034ca:	2018      	movs	r0, #24
 80034cc:	f000 f82c 	bl	8003528 <malloc>
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <rand+0x54>)
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <rand+0x58>)
 80034d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80034d6:	e9c0 2300 	strd	r2, r3, [r0]
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <rand+0x5c>)
 80034dc:	6083      	str	r3, [r0, #8]
 80034de:	230b      	movs	r3, #11
 80034e0:	8183      	strh	r3, [r0, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	2300      	movs	r3, #0
 80034e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80034ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034ec:	480c      	ldr	r0, [pc, #48]	; (8003520 <rand+0x60>)
 80034ee:	690a      	ldr	r2, [r1, #16]
 80034f0:	694b      	ldr	r3, [r1, #20]
 80034f2:	4c0c      	ldr	r4, [pc, #48]	; (8003524 <rand+0x64>)
 80034f4:	4350      	muls	r0, r2
 80034f6:	fb04 0003 	mla	r0, r4, r3, r0
 80034fa:	fba2 2304 	umull	r2, r3, r2, r4
 80034fe:	4403      	add	r3, r0
 8003500:	1c54      	adds	r4, r2, #1
 8003502:	f143 0500 	adc.w	r5, r3, #0
 8003506:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800350a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	2000000c 	.word	0x2000000c
 8003514:	abcd330e 	.word	0xabcd330e
 8003518:	e66d1234 	.word	0xe66d1234
 800351c:	0005deec 	.word	0x0005deec
 8003520:	5851f42d 	.word	0x5851f42d
 8003524:	4c957f2d 	.word	0x4c957f2d

08003528 <malloc>:
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <malloc+0xc>)
 800352a:	4601      	mov	r1, r0
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	f000 b803 	b.w	8003538 <_malloc_r>
 8003532:	bf00      	nop
 8003534:	2000000c 	.word	0x2000000c

08003538 <_malloc_r>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	1ccd      	adds	r5, r1, #3
 800353c:	f025 0503 	bic.w	r5, r5, #3
 8003540:	3508      	adds	r5, #8
 8003542:	2d0c      	cmp	r5, #12
 8003544:	bf38      	it	cc
 8003546:	250c      	movcc	r5, #12
 8003548:	2d00      	cmp	r5, #0
 800354a:	4606      	mov	r6, r0
 800354c:	db01      	blt.n	8003552 <_malloc_r+0x1a>
 800354e:	42a9      	cmp	r1, r5
 8003550:	d903      	bls.n	800355a <_malloc_r+0x22>
 8003552:	230c      	movs	r3, #12
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	2000      	movs	r0, #0
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	f000 f857 	bl	800360c <__malloc_lock>
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <_malloc_r+0xac>)
 8003560:	6814      	ldr	r4, [r2, #0]
 8003562:	4621      	mov	r1, r4
 8003564:	b991      	cbnz	r1, 800358c <_malloc_r+0x54>
 8003566:	4c20      	ldr	r4, [pc, #128]	; (80035e8 <_malloc_r+0xb0>)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	b91b      	cbnz	r3, 8003574 <_malloc_r+0x3c>
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f83d 	bl	80035ec <_sbrk_r>
 8003572:	6020      	str	r0, [r4, #0]
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f000 f838 	bl	80035ec <_sbrk_r>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d124      	bne.n	80035ca <_malloc_r+0x92>
 8003580:	230c      	movs	r3, #12
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f842 	bl	800360e <__malloc_unlock>
 800358a:	e7e4      	b.n	8003556 <_malloc_r+0x1e>
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	1b5b      	subs	r3, r3, r5
 8003590:	d418      	bmi.n	80035c4 <_malloc_r+0x8c>
 8003592:	2b0b      	cmp	r3, #11
 8003594:	d90f      	bls.n	80035b6 <_malloc_r+0x7e>
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	50cd      	str	r5, [r1, r3]
 800359a:	18cc      	adds	r4, r1, r3
 800359c:	4630      	mov	r0, r6
 800359e:	f000 f836 	bl	800360e <__malloc_unlock>
 80035a2:	f104 000b 	add.w	r0, r4, #11
 80035a6:	1d23      	adds	r3, r4, #4
 80035a8:	f020 0007 	bic.w	r0, r0, #7
 80035ac:	1ac3      	subs	r3, r0, r3
 80035ae:	d0d3      	beq.n	8003558 <_malloc_r+0x20>
 80035b0:	425a      	negs	r2, r3
 80035b2:	50e2      	str	r2, [r4, r3]
 80035b4:	e7d0      	b.n	8003558 <_malloc_r+0x20>
 80035b6:	428c      	cmp	r4, r1
 80035b8:	684b      	ldr	r3, [r1, #4]
 80035ba:	bf16      	itet	ne
 80035bc:	6063      	strne	r3, [r4, #4]
 80035be:	6013      	streq	r3, [r2, #0]
 80035c0:	460c      	movne	r4, r1
 80035c2:	e7eb      	b.n	800359c <_malloc_r+0x64>
 80035c4:	460c      	mov	r4, r1
 80035c6:	6849      	ldr	r1, [r1, #4]
 80035c8:	e7cc      	b.n	8003564 <_malloc_r+0x2c>
 80035ca:	1cc4      	adds	r4, r0, #3
 80035cc:	f024 0403 	bic.w	r4, r4, #3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d005      	beq.n	80035e0 <_malloc_r+0xa8>
 80035d4:	1a21      	subs	r1, r4, r0
 80035d6:	4630      	mov	r0, r6
 80035d8:	f000 f808 	bl	80035ec <_sbrk_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d0cf      	beq.n	8003580 <_malloc_r+0x48>
 80035e0:	6025      	str	r5, [r4, #0]
 80035e2:	e7db      	b.n	800359c <_malloc_r+0x64>
 80035e4:	20000090 	.word	0x20000090
 80035e8:	20000094 	.word	0x20000094

080035ec <_sbrk_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4c06      	ldr	r4, [pc, #24]	; (8003608 <_sbrk_r+0x1c>)
 80035f0:	2300      	movs	r3, #0
 80035f2:	4605      	mov	r5, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	f7fd fa2a 	bl	8000a50 <_sbrk>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_sbrk_r+0x1a>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	b103      	cbz	r3, 8003606 <_sbrk_r+0x1a>
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	200007b8 	.word	0x200007b8

0800360c <__malloc_lock>:
 800360c:	4770      	bx	lr

0800360e <__malloc_unlock>:
 800360e:	4770      	bx	lr

08003610 <_init>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr

0800361c <_fini>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr
