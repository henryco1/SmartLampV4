
SmartLampV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000355c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003864  08003864  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000070  080038dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  080038dc  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deda  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e9d  00000000  00000000  0002df7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e87  00000000  00000000  000313e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cd2  00000000  00000000  00052267  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2c1f  00000000  00000000  0005bf39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011eb58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  0011ebd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00121bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00121bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080036d0 	.word	0x080036d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	080036d0 	.word	0x080036d0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b598      	push	{r3, r4, r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fced 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f89c 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f994 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f974 	bl	80007c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f942 	bl	8000768 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e4:	f000 f902 	bl	80006ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // LED pin: the LED strip uses PA7, PA7 is AF#0 (SPI1 SDO / MISO).
  GPIOA->MODER    &= ~( 0x3 << ( 7 * 2 ) );		// clear / set to reset
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER    |=  ( 0x2 << ( 7 * 2 ) );		// set to alt func mode
 80004f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000506:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] &= ~( 0x00 << (7 * 2) );		// clear
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000510:	6a1b      	ldr	r3, [r3, #32]
 8000512:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= ( 0x5 << (7 * 4) );		// set AF5 for PA7 is SPI1_MOSI (GPIO_AFRL_AFSEL5)
 8000514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000518:	6a1b      	ldr	r3, [r3, #32]
 800051a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000522:	6213      	str	r3, [r2, #32]
   * - Power button uses PA0
   * - Mode switch left uses PA1
   * - Mode switch right uses PA2
   */

  GPIOA->MODER    &= ~( (0x3 << GPIO_PIN_0 ) | (0x3 << GPIO_PIN_1 ) | (0x3 << GPIO_PIN_2 ) );
 8000524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8000532:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR    &= ~( (0x0 << GPIO_PIN_0 ) | (0x0 << GPIO_PIN_1 ) | (0x0 << GPIO_PIN_2 ) );
 8000534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000538:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	60d3      	str	r3, [r2, #12]
  GPIOA->MODER    |=  ( (0x0 << GPIO_PIN_0 ) | (0x0 << GPIO_PIN_1 ) | (0x0 << GPIO_PIN_2 ) );		// set to alt func mode
 8000540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000544:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR    |=  ( (0x1 << GPIO_PIN_0 ) | (0x1 << GPIO_PIN_1 ) | (0x1 << GPIO_PIN_2 ) );		// set gpio as input
 800054c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000556:	f043 0316 	orr.w	r3, r3, #22
 800055a:	60d3      	str	r3, [r2, #12]
   * - Circular mode
   * - Increment memory ptr, don't increment peripheral ptr
   * - Bit data size for both source and destination
   * - High priority
   */
  DMA1_Channel3->CCR &= ~( DMA_CCR_MEM2MEM |
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <main+0x134>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <main+0x134>)
 8000562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000566:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800056a:	6013      	str	r3, [r2, #0]
						   DMA_CCR_PL |
						   DMA_CCR_MSIZE |
						   DMA_CCR_PSIZE |
						   DMA_CCR_PINC |
						   DMA_CCR_EN );
  DMA1_Channel3->CCR |=  (( 0x2 << DMA_CCR_PL_Pos ) |
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <main+0x134>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <main+0x134>)
 8000572:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8000576:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800057a:	6013      	str	r3, [r2, #0]
						   DMA_CCR_CIRC |
						   DMA_CCR_DIR );

  // Set DMA source and destination addresses.
  // Source: Address of the framebuffer.
  DMA1_Channel3->CMAR  = ( uint32_t )&COLORS;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x134>)
 800057e:	4a21      	ldr	r2, [pc, #132]	; (8000604 <main+0x138>)
 8000580:	60da      	str	r2, [r3, #12]
  // Destination: SPI1 data register.
  DMA1_Channel3->CPAR  = ( uint32_t )&( SPI1->DR );
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <main+0x134>)
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <main+0x13c>)
 8000586:	609a      	str	r2, [r3, #8]
  // Set DMA data transfer length (framebuffer length).
  DMA1_Channel3->CNDTR = ( uint16_t )LED_BYTES;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x134>)
 800058a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800058e:	605a      	str	r2, [r3, #4]
  // - Assert internal CS signal (software CS pin control)
  // - MSB-first
  // - 8-bit frames
  // - Baud rate prescaler of 8 (for a 6MHz bit-clock)
  // - TX DMA requests enabled.
  SPI1->CR1 &= ~( SPI_CR1_LSBFIRST |
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <main+0x140>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <main+0x140>)
 8000596:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800059a:	6013      	str	r3, [r2, #0]
				  SPI_CR1_BR );
  SPI1->CR1 |=  ( SPI_CR1_SSM |
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <main+0x140>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <main+0x140>)
 80005a2:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	6013      	str	r3, [r2, #0]
				  SPI_CR1_SSI |
				  0x2 << SPI_CR1_BR_Pos |
				  SPI_CR1_MSTR |
				  SPI_CR1_CPOL |
				  SPI_CR1_CPHA );
  SPI1->CR2 &= ~( SPI_CR2_DS );
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <main+0x140>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a16      	ldr	r2, [pc, #88]	; (800060c <main+0x140>)
 80005b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005b6:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |=  ( 0x7 << SPI_CR2_DS_Pos |
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <main+0x140>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <main+0x140>)
 80005be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	6053      	str	r3, [r2, #4]
				  SPI_CR2_TXDMAEN );
  // Enable the SPI peripheral.
  SPI1->CR1 |=  ( SPI_CR1_SPE );
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <main+0x140>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0f      	ldr	r2, [pc, #60]	; (800060c <main+0x140>)
 80005ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d2:	6013      	str	r3, [r2, #0]
  // Enable DMA1 Channel 1 to start sending colors.
  DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x134>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <main+0x134>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
  // Done; now just cycle between colors.
  reset_leds();
 80005e0:	f000 fb4c 	bl	8000c7c <reset_leds>

  srand(time(NULL));
 80005e4:	2000      	movs	r0, #0
 80005e6:	f002 ffcb 	bl	8003580 <time>
 80005ea:	4603      	mov	r3, r0
 80005ec:	460c      	mov	r4, r1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 ff6e 	bl	80034d0 <srand>
  init_fire_effect();
 80005f4:	f000 fb76 	bl	8000ce4 <init_fire_effect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		set_fire_effect();
 80005f8:	f000 fb8e 	bl	8000d18 <set_fire_effect>
 80005fc:	e7fc      	b.n	80005f8 <main+0x12c>
 80005fe:	bf00      	nop
 8000600:	40020030 	.word	0x40020030
 8000604:	20000168 	.word	0x20000168
 8000608:	4001300c 	.word	0x4001300c
 800060c:	40013000 	.word	0x40013000

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0ac      	sub	sp, #176	; 0xb0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 ff4e 	bl	80034c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2254      	movs	r2, #84	; 0x54
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 ff40 	bl	80034c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000660:	2313      	movs	r3, #19
 8000662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000666:	2307      	movs	r3, #7
 8000668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000672:	2306      	movs	r3, #6
 8000674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f8cf 	bl	8001820 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000688:	f000 f8d4 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a4:	2103      	movs	r1, #3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fcda 	bl	8002060 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 f8bf 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fed1 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 f8b2 	bl	8000834 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d4:	f001 f84e 	bl	8001774 <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 f8a9 	bl	8000834 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	37b0      	adds	r7, #176	; 0xb0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_SPI1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x74>)
 8000706:	f44f 7240 	mov.w	r2, #768	; 0x300
 800070a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x74>)
 800070e:	2202      	movs	r2, #2
 8000710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x74>)
 800071a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x74>)
 8000722:	2210      	movs	r2, #16
 8000724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x74>)
 800073a:	2207      	movs	r2, #7
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x74>)
 8000746:	2208      	movs	r2, #8
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_SPI1_Init+0x74>)
 800074c:	f002 f96e 	bl	8002a2c <HAL_SPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f86d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000688 	.word	0x20000688
 8000764:	40013000 	.word	0x40013000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f002 f9c8 	bl	8002b40 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f83d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200006ec 	.word	0x200006ec
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x38>)
 80007d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x38>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6493      	str	r3, [r2, #72]	; 0x48
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x38>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200d      	movs	r0, #13
 80007ec:	f000 fcab 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007f0:	200d      	movs	r0, #13
 80007f2:	f000 fcc4 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0x2c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0x2c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0x2c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6613      	str	r3, [r2, #96]	; 0x60
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <HAL_SPI_MspInit+0xd0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d151      	bne.n	8000952 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <HAL_SPI_MspInit+0xd4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80008de:	2382      	movs	r3, #130	; 0x82
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ee:	2305      	movs	r3, #5
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fdc2 	bl	8001484 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_SPI_MspInit+0xdc>)
 8000904:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000908:	2201      	movs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 800090e:	2210      	movs	r2, #16
 8000910:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 8000938:	f000 fc3c 	bl	80011b4 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000942:	f7ff ff77 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 800094a:	655a      	str	r2, [r3, #84]	; 0x54
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <HAL_SPI_MspInit+0xd8>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40013000 	.word	0x40013000
 8000960:	40021000 	.word	0x40021000
 8000964:	2000076c 	.word	0x2000076c
 8000968:	40020030 	.word	0x40020030

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0x7c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d128      	bne.n	80009e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x80>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <HAL_UART_MspInit+0x80>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0x80>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_UART_MspInit+0x80>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009be:	230c      	movs	r3, #12
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ce:	2307      	movs	r3, #7
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f000 fd52 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40021000 	.word	0x40021000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 fa86 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA1_Channel3_IRQHandler+0x10>)
 8000a52:	f000 fc67 	bl	8001324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000076c 	.word	0x2000076c

08000a60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x50>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x16>
		heap_end = &end;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <_sbrk+0x50>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <_sbrk+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <_sbrk+0x50>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_sbrk+0x50>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	466a      	mov	r2, sp
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d907      	bls.n	8000a9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a8a:	f002 fcef 	bl	800346c <__errno>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	230c      	movs	r3, #12
 8000a92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e006      	b.n	8000aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <_sbrk+0x50>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <_sbrk+0x50>)
 8000aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	200007c0 	.word	0x200007c0

08000ab8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <SystemInit+0x64>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <SystemInit+0x64>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <SystemInit+0x68>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <SystemInit+0x68>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <SystemInit+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <SystemInit+0x68>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <SystemInit+0x68>)
 8000ae4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ae8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000aec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <SystemInit+0x68>)
 8000af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <SystemInit+0x68>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <SystemInit+0x68>)
 8000afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <SystemInit+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SystemInit+0x64>)
 8000b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	40021000 	.word	0x40021000

08000b24 <delay_cycles>:
 *      Author: henryco1
 */
#include "ws2812b.h"

void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e003      	b.n	8000b3a <delay_cycles+0x16>
 8000b32:	bf00      	nop
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3f7      	bcc.n	8000b32 <delay_cycles+0xe>
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <get_rgb_color>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

// Get a 32-bit representation of R/G/B colors.
uint32_t get_rgb_color( uint8_t r, uint8_t g, uint8_t b ) {
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	71bb      	strb	r3, [r7, #6]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	717b      	strb	r3, [r7, #5]
  return ( g << 16 | r << 8 | b );
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	041a      	lsls	r2, r3, #16
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	797b      	ldrb	r3, [r7, #5]
 8000b6c:	4313      	orrs	r3, r2
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <set_color>:
// Set an LED to an RGB color.
void set_color( size_t led_index, uint32_t col ) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  size_t led_base = led_index * 24;
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	613b      	str	r3, [r7, #16]
  uint8_t r = ( col >> 8 ) & 0xFF;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint8_t g = ( col >> 16 ) & 0xFF;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	73bb      	strb	r3, [r7, #14]
  uint8_t b = ( col ) & 0xFF;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	737b      	strb	r3, [r7, #13]
  for ( size_t i = 0; i < 8; ++i ) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e019      	b.n	8000bdc <set_color+0x60>
    if ( g & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base ] = 0xF8; }
 8000ba8:	7bba      	ldrb	r2, [r7, #14]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	f1c3 0307 	rsb	r3, r3, #7
 8000bb0:	fa42 f303 	asr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d006      	beq.n	8000bca <set_color+0x4e>
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <set_color+0xfc>)
 8000bc4:	21f8      	movs	r1, #248	; 0xf8
 8000bc6:	54d1      	strb	r1, [r2, r3]
 8000bc8:	e005      	b.n	8000bd6 <set_color+0x5a>
    else { COLORS[ i + led_base ] = 0xC0; }
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <set_color+0xfc>)
 8000bd2:	21c0      	movs	r1, #192	; 0xc0
 8000bd4:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9e2      	bls.n	8000ba8 <set_color+0x2c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e01b      	b.n	8000c20 <set_color+0xa4>
    if ( r & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 8 ] = 0xF8; }
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	f1c3 0307 	rsb	r3, r3, #7
 8000bf0:	fa42 f303 	asr.w	r3, r2, r3
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <set_color+0x90>
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4413      	add	r3, r2
 8000c02:	3308      	adds	r3, #8
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <set_color+0xfc>)
 8000c06:	21f8      	movs	r1, #248	; 0xf8
 8000c08:	54d1      	strb	r1, [r2, r3]
 8000c0a:	e006      	b.n	8000c1a <set_color+0x9e>
    else { COLORS[ i + led_base + 8 ] = 0xC0; }
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4413      	add	r3, r2
 8000c12:	3308      	adds	r3, #8
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <set_color+0xfc>)
 8000c16:	21c0      	movs	r1, #192	; 0xc0
 8000c18:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	d9e0      	bls.n	8000be8 <set_color+0x6c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e01b      	b.n	8000c64 <set_color+0xe8>
    if ( b & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 16 ] = 0xF8; }
 8000c2c:	7b7a      	ldrb	r2, [r7, #13]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f1c3 0307 	rsb	r3, r3, #7
 8000c34:	fa42 f303 	asr.w	r3, r2, r3
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d007      	beq.n	8000c50 <set_color+0xd4>
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4413      	add	r3, r2
 8000c46:	3310      	adds	r3, #16
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <set_color+0xfc>)
 8000c4a:	21f8      	movs	r1, #248	; 0xf8
 8000c4c:	54d1      	strb	r1, [r2, r3]
 8000c4e:	e006      	b.n	8000c5e <set_color+0xe2>
    else { COLORS[ i + led_base + 16 ] = 0xC0; }
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4413      	add	r3, r2
 8000c56:	3310      	adds	r3, #16
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <set_color+0xfc>)
 8000c5a:	21c0      	movs	r1, #192	; 0xc0
 8000c5c:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d9e0      	bls.n	8000c2c <set_color+0xb0>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000168 	.word	0x20000168

08000c7c <reset_leds>:
    set_color( i, get_rgb_color( r, g, b ) );
  }
}

// reset leds
void reset_leds( void ) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	// Set initial colors to 'off'.
	for ( size_t i = 0; i < 300; ++i ) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e00c      	b.n	8000ca2 <reset_leds+0x26>
		set_color( i, get_rgb_color( 0x00, 0x00, 0x00 ) );
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff5e 	bl	8000b4e <get_rgb_color>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ff70 	bl	8000b7c <set_color>
	for ( size_t i = 0; i < 300; ++i ) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ca8:	d3ee      	bcc.n	8000c88 <reset_leds+0xc>
	}
	// Set the latching period to all 0s.
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 8000caa:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	e007      	b.n	8000cc2 <reset_leds+0x46>
		COLORS[ i ] = 0x00;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <reset_leds+0x60>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8000cc8:	d3f3      	bcc.n	8000cb2 <reset_leds+0x36>
	}
	memset(frame_buf, 0, grid_x * grid_y * sizeof(unsigned int));
 8000cca:	22d0      	movs	r2, #208	; 0xd0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <reset_leds+0x64>)
 8000cd0:	f002 fbf6 	bl	80034c0 <memset>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000168 	.word	0x20000168
 8000ce0:	20000098 	.word	0x20000098

08000ce4 <init_fire_effect>:
/*
 * Initializes the frame buf so that the fire can start or be "ignited" from the bottom row of the grid
 * The initial value of the bottom row should be brightest element from the fire color array.
 * By default, the fire color array is sorted from darkest to lightest in ascending order.
 */
void init_fire_effect(void) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
    for (int i=0; i<grid_x; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	e008      	b.n	8000d02 <init_fire_effect+0x1e>
        frame_buf[(grid_y-1) * grid_x + i] = 10;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3330      	adds	r3, #48	; 0x30
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <init_fire_effect+0x30>)
 8000cf6:	210a      	movs	r1, #10
 8000cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i=0; i<grid_x; i++) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	ddf3      	ble.n	8000cf0 <init_fire_effect+0xc>
    }
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000098 	.word	0x20000098

08000d18 <set_fire_effect>:
 * 1. generating a fire model using a 2d array
 * 2. use the fire model to generate color data for the LEDs
 *
 * fire effect based on this gradient https://www.schemecolor.com/fire-gradient.php
 */
void set_fire_effect(void) {
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
	 * gradient table organize in a "fire" pattern
	 * note that my LEDs might be damaged so the color table might be off
	 *
	 * https://meyerweb.com/eric/tools/color-blend/#FFCC66:FF6600:10:rgbd
	 */
	uint8_t fire_colors[14][3] = {
 8000d1e:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <set_fire_effect+0x134>)
 8000d20:	1d3c      	adds	r4, r7, #4
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d30:	c403      	stmia	r4!, {r0, r1}
 8000d32:	8022      	strh	r2, [r4, #0]
	 * This code ignites the flame from the bottom row. The bottom array needs to be initialized from init_fire_effect().
	 * The r_val_spread variable is needed for a fire flickering effect.
	 * An r_val_spread factor value of 1 means no spread. Higher values increased the spread.
	 * Adjust r_val_height to control the height of the embers in the fire. Lower this value to decrease the height
	 */
	int r_val_spread = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
	int r_val_spread_factor = 4; // 3
 8000d38:	2304      	movs	r3, #4
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int r_val_height = 3; // 3
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int x = 0; x < grid_x; x++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d44:	e038      	b.n	8000db8 <set_fire_effect+0xa0>
        for (int y = 1; y < grid_y; y++) {
 8000d46:	2301      	movs	r3, #1
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d4a:	e02f      	b.n	8000dac <set_fire_effect+0x94>
        	r_val_spread = (rand() % r_val_spread_factor );
 8000d4c:	f002 fbe4 	bl	8003518 <rand>
 8000d50:	4603      	mov	r3, r0
 8000d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d54:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d5a:	fb01 f202 	mul.w	r2, r1, r2
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	643b      	str	r3, [r7, #64]	; 0x40
            int prev = y * grid_x + x;
 8000d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d68:	4413      	add	r3, r2
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
            int curr = prev - grid_x;
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
            frame_buf[curr] = abs(frame_buf[prev] - 1 - (r_val_spread & ((rand() % r_val_height) )));
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <set_fire_effect+0x138>)
 8000d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d7a:	f002 fbcd 	bl	8003518 <rand>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d82:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d88:	fb01 f202 	mul.w	r2, r1, r2
 8000d8c:	1a9a      	subs	r2, r3, r2
 8000d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d90:	4013      	ands	r3, r2
 8000d92:	1ae3      	subs	r3, r4, r3
 8000d94:	3b01      	subs	r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfb8      	it	lt
 8000d9a:	425b      	neglt	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4a2c      	ldr	r2, [pc, #176]	; (8000e50 <set_fire_effect+0x138>)
 8000da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int y = 1; y < grid_y; y++) {
 8000da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000da8:	3301      	adds	r3, #1
 8000daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	ddcc      	ble.n	8000d4c <set_fire_effect+0x34>
    for (int x = 0; x < grid_x; x++) {
 8000db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db4:	3301      	adds	r3, #1
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	ddc3      	ble.n	8000d46 <set_fire_effect+0x2e>
        }
    }

    // input the 2d fire model into the LEDs
    for (int i=0; i<NUM_LEDS; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8000dc2:	e038      	b.n	8000e36 <set_fire_effect+0x11e>
    	set_color(i, get_rgb_color(gamma_table[fire_colors[frame_buf[i]][0]], gamma_table[fire_colors[frame_buf[i]][1]], gamma_table[fire_colors[frame_buf[i]][2]]));
 8000dc4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000dc6:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <set_fire_effect+0x138>)
 8000dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b4c      	subs	r3, #76	; 0x4c
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <set_fire_effect+0x13c>)
 8000de2:	5c98      	ldrb	r0, [r3, r2]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <set_fire_effect+0x138>)
 8000de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000df6:	4413      	add	r3, r2
 8000df8:	3b4b      	subs	r3, #75	; 0x4b
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <set_fire_effect+0x13c>)
 8000e00:	5c99      	ldrb	r1, [r3, r2]
 8000e02:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <set_fire_effect+0x138>)
 8000e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000e14:	4413      	add	r3, r2
 8000e16:	3b4a      	subs	r3, #74	; 0x4a
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <set_fire_effect+0x13c>)
 8000e1e:	5c9b      	ldrb	r3, [r3, r2]
 8000e20:	461a      	mov	r2, r3
 8000e22:	f7ff fe94 	bl	8000b4e <get_rgb_color>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff fea6 	bl	8000b7c <set_color>
    for (int i=0; i<NUM_LEDS; i++) {
 8000e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e32:	3301      	adds	r3, #1
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
 8000e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e38:	2b33      	cmp	r3, #51	; 0x33
 8000e3a:	ddc3      	ble.n	8000dc4 <set_fire_effect+0xac>
    }
	delay_cycles( 500000 );
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <set_fire_effect+0x140>)
 8000e3e:	f7ff fe71 	bl	8000b24 <delay_cycles>
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	; 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	080036e8 	.word	0x080036e8
 8000e50:	20000098 	.word	0x20000098
 8000e54:	0800375c 	.word	0x0800375c
 8000e58:	0007a120 	.word	0x0007a120

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e62:	e003      	b.n	8000e6c <LoopCopyDataInit>

08000e64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e6a:	3104      	adds	r1, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e74:	d3f6      	bcc.n	8000e64 <CopyDataInit>
	ldr	r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e78:	e002      	b.n	8000e80 <LoopFillZerobss>

08000e7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e7c:	f842 3b04 	str.w	r3, [r2], #4

08000e80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <LoopForever+0x16>)
	cmp	r2, r3
 8000e82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e84:	d3f9      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e86:	f7ff fe17 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f002 faf5 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fb1d 	bl	80004cc <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e98:	0800386c 	.word	0x0800386c
	ldr	r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ea0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ea4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ea8:	200007bc 	.word	0x200007bc

08000eac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f939 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fcb8 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d022      	beq.n	8000f3a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_InitTick+0x6c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_InitTick+0x68>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f946 	bl	800119a <HAL_SYSTICK_Config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d809      	bhi.n	8000f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	f000 f910 	bl	8001146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_InitTick+0x70>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e004      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200007b4 	.word	0x200007b4
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200007b4 	.word	0x200007b4

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e098      	b.n	80012f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_DMA_Init+0x150>)
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d80f      	bhi.n	80011f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_DMA_Init+0x154>)
 80011da:	4413      	add	r3, r2
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_DMA_Init+0x158>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	009a      	lsls	r2, r3, #2
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_DMA_Init+0x15c>)
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
 80011f0:	e00e      	b.n	8001210 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_DMA_Init+0x160>)
 80011fa:	4413      	add	r3, r2
 80011fc:	4a43      	ldr	r2, [pc, #268]	; (800130c <HAL_DMA_Init+0x158>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	009a      	lsls	r2, r3, #2
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_DMA_Init+0x164>)
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800122a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800126a:	d039      	beq.n	80012e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_DMA_Init+0x15c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d11a      	bne.n	80012ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_DMA_Init+0x168>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 031c 	and.w	r3, r3, #28
 8001282:	210f      	movs	r1, #15
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4924      	ldr	r1, [pc, #144]	; (800131c <HAL_DMA_Init+0x168>)
 800128c:	4013      	ands	r3, r2
 800128e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_DMA_Init+0x168>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f003 031c 	and.w	r3, r3, #28
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	491d      	ldr	r1, [pc, #116]	; (800131c <HAL_DMA_Init+0x168>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
 80012aa:	e019      	b.n	80012e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_DMA_Init+0x16c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	f003 031c 	and.w	r3, r3, #28
 80012b8:	210f      	movs	r1, #15
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4917      	ldr	r1, [pc, #92]	; (8001320 <HAL_DMA_Init+0x16c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_DMA_Init+0x16c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 031c 	and.w	r3, r3, #28
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	4911      	ldr	r1, [pc, #68]	; (8001320 <HAL_DMA_Init+0x16c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40020407 	.word	0x40020407
 8001308:	bffdfff8 	.word	0xbffdfff8
 800130c:	cccccccd 	.word	0xcccccccd
 8001310:	40020000 	.word	0x40020000
 8001314:	bffdfbf8 	.word	0xbffdfbf8
 8001318:	40020400 	.word	0x40020400
 800131c:	400200a8 	.word	0x400200a8
 8001320:	400204a8 	.word	0x400204a8

08001324 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 031c 	and.w	r3, r3, #28
 8001344:	2204      	movs	r2, #4
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d026      	beq.n	800139e <HAL_DMA_IRQHandler+0x7a>
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d021      	beq.n	800139e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0204 	bic.w	r2, r2, #4
 8001376:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f003 021c 	and.w	r2, r3, #28
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2104      	movs	r1, #4
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	2b00      	cmp	r3, #0
 8001392:	d071      	beq.n	8001478 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800139c:	e06c      	b.n	8001478 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f003 031c 	and.w	r3, r3, #28
 80013a6:	2202      	movs	r2, #2
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d02e      	beq.n	8001410 <HAL_DMA_IRQHandler+0xec>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d029      	beq.n	8001410 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 020a 	bic.w	r2, r2, #10
 80013d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 021c 	and.w	r2, r3, #28
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2102      	movs	r1, #2
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d038      	beq.n	8001478 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800140e:	e033      	b.n	8001478 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	f003 031c 	and.w	r3, r3, #28
 8001418:	2208      	movs	r2, #8
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02a      	beq.n	800147a <HAL_DMA_IRQHandler+0x156>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d025      	beq.n	800147a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 020e 	bic.w	r2, r2, #14
 800143c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 021c 	and.w	r2, r3, #28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001478:	bf00      	nop
 800147a:	bf00      	nop
}
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e148      	b.n	8001726 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 813a 	beq.w	8001720 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00b      	beq.n	80014cc <HAL_GPIO_Init+0x48>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d007      	beq.n	80014cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c0:	2b11      	cmp	r3, #17
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b12      	cmp	r3, #18
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0xea>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b12      	cmp	r3, #18
 800156c:	d123      	bne.n	80015b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0203 	and.w	r2, r3, #3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8094 	beq.w	8001720 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fc:	4a51      	ldr	r2, [pc, #324]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6613      	str	r3, [r2, #96]	; 0x60
 8001604:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001610:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1d4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a43      	ldr	r2, [pc, #268]	; (800174c <HAL_GPIO_Init+0x2c8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1d0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1cc>
 800164c:	2302      	movs	r3, #2
 800164e:	e004      	b.n	800165a <HAL_GPIO_Init+0x1d6>
 8001650:	2307      	movs	r3, #7
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x1d6>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_GPIO_Init+0x1d6>
 8001658:	2300      	movs	r3, #0
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	f002 0203 	and.w	r2, r2, #3
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	4093      	lsls	r3, r2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166a:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001678:	4b36      	ldr	r3, [pc, #216]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169c:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f aeaf 	bne.w	8001494 <HAL_GPIO_Init+0x10>
  }
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	48000400 	.word	0x48000400
 8001750:	48000800 	.word	0x48000800
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_PWREx_GetVoltageRange+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40007000 	.word	0x40007000

08001774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001782:	d130      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800178c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001790:	d038      	beq.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2232      	movs	r2, #50	; 0x32
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	3301      	adds	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b8:	e002      	b.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017cc:	d102      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e0:	d110      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e00f      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f2:	d007      	beq.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000
 8001818:	20000000 	.word	0x20000000
 800181c:	431bde83 	.word	0x431bde83

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 bc11 	b.w	8002056 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001834:	4ba0      	ldr	r3, [pc, #640]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800183e:	4b9e      	ldr	r3, [pc, #632]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80e4 	beq.w	8001a1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_RCC_OscConfig+0x4c>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	f040 808b 	bne.w	800197a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 8087 	bne.w	800197a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x64>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e3e8      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_RCC_OscConfig+0x7e>
 8001894:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189c:	e005      	b.n	80018aa <HAL_RCC_OscConfig+0x8a>
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d223      	bcs.n	80018f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fd78 	bl	80023a8 <RCC_SetFlashLatencyFromMSIRange>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e3c9      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4977      	ldr	r1, [pc, #476]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	4972      	ldr	r1, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e025      	b.n	8001942 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f6:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	496a      	ldr	r1, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fd38 	bl	80023a8 <RCC_SetFlashLatencyFromMSIRange>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e389      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001942:	f000 fc6f 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x29c>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	fa21 f303 	lsr.w	r3, r1, r3
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_OscConfig+0x2a0>)
 8001960:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x2a4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff faba 	bl	8000ee0 <HAL_InitTick>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d052      	beq.n	8001a1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	e36d      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d032      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001982:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800198e:	f7ff faf3 	bl	8000f78 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001996:	f7ff faef 	bl	8000f78 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e356      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b4:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	493a      	ldr	r1, [pc, #232]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4935      	ldr	r1, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e01a      	b.n	8001a1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fac0 	bl	8000f78 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019fc:	f7ff fabc 	bl	8000f78 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e323      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1dc>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d073      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x21c>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d10e      	bne.n	8001a54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d10b      	bne.n	8001a54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d063      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d15f      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e300      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x24c>
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x288>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x270>
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x288>
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fa62 	bl	8000f78 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	e010      	b.n	8001ada <HAL_RCC_OscConfig+0x2ba>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08003714 	.word	0x08003714
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fa56 	bl	8000f78 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e2bd      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	4baf      	ldr	r3, [pc, #700]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2a8>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa46 	bl	8000f78 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa42 	bl	8000f78 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e2a9      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b02:	4ba5      	ldr	r3, [pc, #660]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2d0>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d060      	beq.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x310>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d116      	bne.n	8001b5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b30:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x328>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e286      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b93      	ldr	r3, [pc, #588]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	4990      	ldr	r1, [pc, #576]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	e040      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d023      	beq.n	8001bae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b66:	4b8c      	ldr	r3, [pc, #560]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a8b      	ldr	r2, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa01 	bl	8000f78 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f9fd 	bl	8000f78 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e264      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	497c      	ldr	r1, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e018      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a79      	ldr	r2, [pc, #484]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff f9dd 	bl	8000f78 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f9d9 	bl	8000f78 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e240      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd4:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	4a67      	ldr	r2, [pc, #412]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f9b8 	bl	8000f78 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f9b4 	bl	8000f78 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e21b      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1e:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_RCC_OscConfig+0x3ec>
 8001c2c:	e01b      	b.n	8001c66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f99b 	bl	8000f78 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff f997 	bl	8000f78 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1fe      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80a6 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	4a43      	ldr	r2, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c90:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d118      	bne.n	8001cde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cac:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x57c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x57c>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f95e 	bl	8000f78 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7ff f95a 	bl	8000f78 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1c1      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <HAL_RCC_OscConfig+0x57c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4d8>
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf6:	e024      	b.n	8001d42 <HAL_RCC_OscConfig+0x522>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d110      	bne.n	8001d22 <HAL_RCC_OscConfig+0x502>
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d20:	e00f      	b.n	8001d42 <HAL_RCC_OscConfig+0x522>
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f915 	bl	8000f78 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f911 	bl	8000f78 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e176      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ed      	beq.n	8001d52 <HAL_RCC_OscConfig+0x532>
 8001d76:	e01a      	b.n	8001dae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f8fe 	bl	8000f78 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d7e:	e00f      	b.n	8001da0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff f8fa 	bl	8000f78 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d906      	bls.n	8001da0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e15f      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da0:	4baa      	ldr	r3, [pc, #680]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e8      	bne.n	8001d80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4ba5      	ldr	r3, [pc, #660]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4aa4      	ldr	r2, [pc, #656]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dda:	4a9c      	ldr	r2, [pc, #624]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f8c8 	bl	8000f78 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dec:	f7ff f8c4 	bl	8000f78 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e12b      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dfe:	4b93      	ldr	r3, [pc, #588]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ef      	beq.n	8001dec <HAL_RCC_OscConfig+0x5cc>
 8001e0c:	e01b      	b.n	8001e46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e0e:	4b8f      	ldr	r3, [pc, #572]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e14:	4a8d      	ldr	r2, [pc, #564]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f8ab 	bl	8000f78 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e26:	f7ff f8a7 	bl	8000f78 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e10e      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8102 	beq.w	8002054 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	f040 80c5 	bne.w	8001fe4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0203 	and.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d12c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d123      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d113      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	3b01      	subs	r3, #1
 8001eae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d109      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d067      	beq.n	8001f98 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d062      	beq.n	8001f94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0bb      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ede:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eea:	f7ff f845 	bl	8000f78 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f841 	bl	8000f78 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0a8      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_RCC_OscConfig+0x830>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f20:	3a01      	subs	r2, #1
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f2a:	0212      	lsls	r2, r2, #8
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f32:	0852      	lsrs	r2, r2, #1
 8001f34:	3a01      	subs	r2, #1
 8001f36:	0552      	lsls	r2, r2, #21
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f3e:	0852      	lsrs	r2, r2, #1
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0652      	lsls	r2, r2, #25
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f4a:	06d2      	lsls	r2, r2, #27
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	493f      	ldr	r1, [pc, #252]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3c      	ldr	r2, [pc, #240]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f6c:	f7ff f804 	bl	8000f78 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff f800 	bl	8000f78 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e067      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f92:	e05f      	b.n	8002054 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e05e      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f98:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fbc:	f7fe ffdc 	bl	8000f78 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ffd8 	bl	8000f78 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e03f      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x7a4>
 8001fe2:	e037      	b.n	8002054 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d02d      	beq.n	8002046 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8002008:	f023 0303 	bic.w	r3, r3, #3
 800200c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 8002014:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe ffab 	bl	8000f78 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe ffa7 	bl	8000f78 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e00e      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x82c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x806>
 8002044:	e006      	b.n	8002054 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e005      	b.n	8002056 <HAL_RCC_OscConfig+0x836>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0c8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4961      	ldr	r1, [pc, #388]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b0      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d04c      	beq.n	800214a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b8:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d121      	bne.n	8002108 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e09e      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d115      	bne.n	8002108 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e092      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e086      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e07e      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002108:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	493f      	ldr	r1, [pc, #252]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211a:	f7fe ff2d 	bl	8000f78 <HAL_GetTick>
 800211e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002120:	e00a      	b.n	8002138 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7fe ff29 	bl	8000f78 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e066      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 020c 	and.w	r2, r3, #12
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	429a      	cmp	r2, r3
 8002148:	d1eb      	bne.n	8002122 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	492c      	ldr	r1, [pc, #176]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d210      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	4924      	ldr	r1, [pc, #144]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x1b0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e036      	b.n	8002206 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4918      	ldr	r1, [pc, #96]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4910      	ldr	r1, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d6:	f000 f825 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021da:	4601      	mov	r1, r0
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x1b4>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	fa21 f303 	lsr.w	r3, r1, r3
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fe70 	bl	8000ee0 <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	72fb      	strb	r3, [r7, #11]

  return status;
 8002204:	7afb      	ldrb	r3, [r7, #11]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	08003714 	.word	0x08003714
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d121      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11e      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e005      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e004      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 80022aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d133      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0xaa>
 80022c6:	e005      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ca:	617b      	str	r3, [r7, #20]
      break;
 80022cc:	e005      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d0:	617b      	str	r3, [r7, #20]
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	617b      	str	r3, [r7, #20]
      break;
 80022d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	3301      	adds	r3, #1
 80022e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	fb02 f203 	mul.w	r2, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0e5b      	lsrs	r3, r3, #25
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800231a:	69bb      	ldr	r3, [r7, #24]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3724      	adds	r7, #36	; 0x24
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000
 800232c:	0800372c 	.word	0x0800372c
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4601      	mov	r1, r0
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08003724 	.word	0x08003724

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002380:	f7ff ffda 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002384:	4601      	mov	r1, r0
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	08003724 	.word	0x08003724

080023a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c0:	f7ff f9ca 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 80023c4:	6178      	str	r0, [r7, #20]
 80023c6:	e014      	b.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	4a24      	ldr	r2, [pc, #144]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6593      	str	r3, [r2, #88]	; 0x58
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e0:	f7ff f9ba 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 80023e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f8:	d10b      	bne.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d919      	bls.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2ba0      	cmp	r3, #160	; 0xa0
 8002404:	d902      	bls.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e013      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e010      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d902      	bls.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002418:	2303      	movs	r3, #3
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e00a      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d102      	bne.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e004      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b70      	cmp	r3, #112	; 0x70
 800242e:	d101      	bne.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002430:	2301      	movs	r3, #1
 8002432:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 0207 	bic.w	r2, r3, #7
 800243c:	4909      	ldr	r1, [pc, #36]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002470:	2300      	movs	r3, #0
 8002472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002474:	2300      	movs	r3, #0
 8002476:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02f      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800248c:	d005      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800248e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002498:	e00f      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800249a:	4bac      	ldr	r3, [pc, #688]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4aab      	ldr	r2, [pc, #684]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a6:	e00c      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f9cc 	bl	800284c <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b8:	e003      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	74fb      	strb	r3, [r7, #19]
      break;
 80024be:	e000      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80024c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	499d      	ldr	r1, [pc, #628]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024de:	e001      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8099 	beq.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f6:	4b95      	ldr	r3, [pc, #596]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b8f      	ldr	r3, [pc, #572]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	4a8e      	ldr	r2, [pc, #568]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	; 0x58
 8002518:	4b8c      	ldr	r3, [pc, #560]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002524:	2301      	movs	r3, #1
 8002526:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002528:	4b89      	ldr	r3, [pc, #548]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a88      	ldr	r2, [pc, #544]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002534:	f7fe fd20 	bl	8000f78 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fd1c 	bl	8000f78 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	74fb      	strb	r3, [r7, #19]
        break;
 800254e:	e005      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002550:	4b7f      	ldr	r3, [pc, #508]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d155      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01e      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	429a      	cmp	r2, r3
 800257c:	d019      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800258a:	4b70      	ldr	r3, [pc, #448]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	4a6a      	ldr	r2, [pc, #424]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025aa:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcdc 	bl	8000f78 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	e00b      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fcd8 	bl	8000f78 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d902      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	74fb      	strb	r3, [r7, #19]
            break;
 80025da:	e006      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025dc:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ec      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f0:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	4953      	ldr	r1, [pc, #332]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002606:	e004      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
 800260c:	e001      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7c7b      	ldrb	r3, [r7, #17]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a4b      	ldr	r2, [pc, #300]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4943      	ldr	r1, [pc, #268]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 020c 	bic.w	r2, r3, #12
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	493a      	ldr	r1, [pc, #232]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	4932      	ldr	r1, [pc, #200]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	4921      	ldr	r1, [pc, #132]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	4918      	ldr	r1, [pc, #96]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4910      	ldr	r1, [pc, #64]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02c      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273c:	d10a      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273e:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a02      	ldr	r2, [pc, #8]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002748:	60d3      	str	r3, [r2, #12]
 800274a:	e015      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f871 	bl	800284c <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d028      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	492d      	ldr	r1, [pc, #180]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
 80027b0:	e011      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f842 	bl	800284c <RCCEx_PLLSAI1_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01c      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	4915      	ldr	r1, [pc, #84]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002800:	d10c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	2102      	movs	r1, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f81f 	bl	800284c <RCCEx_PLLSAI1_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285a:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002866:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
       ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800287e:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
       ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d044      	beq.n	800291c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e041      	b.n	800291c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d00c      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x6e>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d013      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0x80>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d120      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11d      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e01a      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ca:	e013      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028cc:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10f      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028e8:	e006      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      break;
 80028ee:	e004      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028f0:	bf00      	nop
 80028f2:	e002      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002900:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	3b01      	subs	r3, #1
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	430b      	orrs	r3, r1
 8002916:	4944      	ldr	r1, [pc, #272]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d17c      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a40      	ldr	r2, [pc, #256]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800292c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292e:	f7fe fb23 	bl	8000f78 <HAL_GetTick>
 8002932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002934:	e009      	b.n	800294a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002936:	f7fe fb1f 	bl	8000f78 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d902      	bls.n	800294a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	73fb      	strb	r3, [r7, #15]
        break;
 8002948:	e005      	b.n	8002956 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ef      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d15f      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d110      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002962:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800296a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	0211      	lsls	r1, r2, #8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	06d2      	lsls	r2, r2, #27
 800297a:	430a      	orrs	r2, r1
 800297c:	492a      	ldr	r1, [pc, #168]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	610b      	str	r3, [r1, #16]
 8002982:	e027      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d112      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002992:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0211      	lsls	r1, r2, #8
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6912      	ldr	r2, [r2, #16]
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0552      	lsls	r2, r2, #21
 80029a6:	430a      	orrs	r2, r1
 80029a8:	491f      	ldr	r1, [pc, #124]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	610b      	str	r3, [r1, #16]
 80029ae:	e011      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6952      	ldr	r2, [r2, #20]
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	3a01      	subs	r2, #1
 80029ca:	0652      	lsls	r2, r2, #25
 80029cc:	430a      	orrs	r2, r1
 80029ce:	4916      	ldr	r1, [pc, #88]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe faca 	bl	8000f78 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e6:	e009      	b.n	80029fc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e8:	f7fe fac6 	bl	8000f78 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	73fb      	strb	r3, [r7, #15]
          break;
 80029fa:	e005      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4904      	ldr	r1, [pc, #16]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07c      	b.n	8002b38 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fd ff17 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a7e:	d902      	bls.n	8002a86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e002      	b.n	8002a8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a94:	d007      	beq.n	8002aa6 <HAL_SPI_Init+0x7a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ab6:	d903      	bls.n	8002ac0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	e002      	b.n	8002ac6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	ea42 0103 	orr.w	r1, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	f003 0204 	and.w	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	ea42 0103 	orr.w	r1, r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e040      	b.n	8002bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ff02 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f82c 	bl	8002bdc <UART_SetConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb06 	bl	80031a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fb8d 	bl	80032ec <UART_CheckIdleState>
 8002bd2:	4603      	mov	r3, r0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002be0:	b08a      	sub	sp, #40	; 0x28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4bb3      	ldr	r3, [pc, #716]	; (8002ee0 <UART_SetConfig+0x304>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4aa9      	ldr	r2, [pc, #676]	; (8002ee4 <UART_SetConfig+0x308>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4aa0      	ldr	r2, [pc, #640]	; (8002ee8 <UART_SetConfig+0x30c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d126      	bne.n	8002cba <UART_SetConfig+0xde>
 8002c6c:	4b9f      	ldr	r3, [pc, #636]	; (8002eec <UART_SetConfig+0x310>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d81a      	bhi.n	8002cb0 <UART_SetConfig+0xd4>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <UART_SetConfig+0xa4>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002ca1 	.word	0x08002ca1
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002ca9 	.word	0x08002ca9
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c96:	e080      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9e:	e07c      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca6:	e078      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002ca8:	2308      	movs	r3, #8
 8002caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cae:	e074      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	bf00      	nop
 8002cb8:	e06f      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8c      	ldr	r2, [pc, #560]	; (8002ef0 <UART_SetConfig+0x314>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d138      	bne.n	8002d36 <UART_SetConfig+0x15a>
 8002cc4:	4b89      	ldr	r3, [pc, #548]	; (8002eec <UART_SetConfig+0x310>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d82c      	bhi.n	8002d2c <UART_SetConfig+0x150>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <UART_SetConfig+0xfc>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d0d 	.word	0x08002d0d
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d2d 	.word	0x08002d2d
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002d2d 	.word	0x08002d2d
 8002cf0:	08002d2d 	.word	0x08002d2d
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d15 	.word	0x08002d15
 8002cfc:	08002d2d 	.word	0x08002d2d
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	08002d25 	.word	0x08002d25
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d12:	e042      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d14:	2302      	movs	r3, #2
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1a:	e03e      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d22:	e03a      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d24:	2308      	movs	r3, #8
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2a:	e036      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d32:	bf00      	nop
 8002d34:	e031      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <UART_SetConfig+0x308>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d129      	bne.n	8002d94 <UART_SetConfig+0x1b8>
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <UART_SetConfig+0x310>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d014      	beq.n	8002d7a <UART_SetConfig+0x19e>
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d802      	bhi.n	8002d5c <UART_SetConfig+0x180>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <UART_SetConfig+0x18e>
 8002d5a:	e016      	b.n	8002d8a <UART_SetConfig+0x1ae>
 8002d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d60:	d007      	beq.n	8002d72 <UART_SetConfig+0x196>
 8002d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d66:	d00c      	beq.n	8002d82 <UART_SetConfig+0x1a6>
 8002d68:	e00f      	b.n	8002d8a <UART_SetConfig+0x1ae>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d70:	e013      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d72:	2302      	movs	r3, #2
 8002d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d78:	e00f      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d80:	e00b      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d82:	2308      	movs	r3, #8
 8002d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d88:	e007      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <UART_SetConfig+0x1be>
 8002d94:	2310      	movs	r3, #16
 8002d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a51      	ldr	r2, [pc, #324]	; (8002ee4 <UART_SetConfig+0x308>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	f040 80fa 	bne.w	8002f9a <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d823      	bhi.n	8002df6 <UART_SetConfig+0x21a>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <UART_SetConfig+0x1d8>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002df7 	.word	0x08002df7
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002df7 	.word	0x08002df7
 8002dc4:	08002de7 	.word	0x08002de7
 8002dc8:	08002df7 	.word	0x08002df7
 8002dcc:	08002df7 	.word	0x08002df7
 8002dd0:	08002df7 	.word	0x08002df7
 8002dd4:	08002def 	.word	0x08002def
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff faba 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dde:	e00d      	b.n	8002dfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002de0:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <UART_SetConfig+0x318>)
 8002de2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002de4:	e00a      	b.n	8002dfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002de6:	f7ff fa1d 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8002dea:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dec:	e006      	b.n	8002dfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002df4:	e002      	b.n	8002dfc <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	76fb      	strb	r3, [r7, #27]
        break;
 8002dfa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 81c6 	beq.w	8003190 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d305      	bcc.n	8002e20 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d902      	bls.n	8002e26 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	76fb      	strb	r3, [r7, #27]
 8002e24:	e1b4      	b.n	8003190 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8002e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	f200 80a2 	bhi.w	8002f74 <UART_SetConfig+0x398>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0x25c>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002f75 	.word	0x08002f75
 8002e40:	08002eab 	.word	0x08002eab
 8002e44:	08002f75 	.word	0x08002f75
 8002e48:	08002efd 	.word	0x08002efd
 8002e4c:	08002f75 	.word	0x08002f75
 8002e50:	08002f75 	.word	0x08002f75
 8002e54:	08002f75 	.word	0x08002f75
 8002e58:	08002f4b 	.word	0x08002f4b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff fa78 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002e60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	0214      	lsls	r4, r2, #8
 8002e74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e78:	020b      	lsls	r3, r1, #8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	0852      	lsrs	r2, r2, #1
 8002e80:	4611      	mov	r1, r2
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	eb13 0b01 	adds.w	fp, r3, r1
 8002e8a:	eb44 0c02 	adc.w	ip, r4, r2
 8002e8e:	4658      	mov	r0, fp
 8002e90:	4661      	mov	r1, ip
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	f7fd f995 	bl	80001cc <__aeabi_uldivmod>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ea8:	e067      	b.n	8002f7a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	f04f 0400 	mov.w	r4, #0
 8002eb4:	4910      	ldr	r1, [pc, #64]	; (8002ef8 <UART_SetConfig+0x31c>)
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	eb13 0b01 	adds.w	fp, r3, r1
 8002ebe:	eb44 0c02 	adc.w	ip, r4, r2
 8002ec2:	4658      	mov	r0, fp
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f04f 0400 	mov.w	r4, #0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f7fd f97b 	bl	80001cc <__aeabi_uldivmod>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460c      	mov	r4, r1
 8002eda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002edc:	e04d      	b.n	8002f7a <UART_SetConfig+0x39e>
 8002ede:	bf00      	nop
 8002ee0:	efff69f3 	.word	0xefff69f3
 8002ee4:	40008000 	.word	0x40008000
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40004400 	.word	0x40004400
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002efc:	f7ff f992 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8002f00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4619      	mov	r1, r3
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	f04f 0400 	mov.w	r4, #0
 8002f12:	0214      	lsls	r4, r2, #8
 8002f14:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f18:	020b      	lsls	r3, r1, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6852      	ldr	r2, [r2, #4]
 8002f1e:	0852      	lsrs	r2, r2, #1
 8002f20:	4611      	mov	r1, r2
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	eb13 0b01 	adds.w	fp, r3, r1
 8002f2a:	eb44 0c02 	adc.w	ip, r4, r2
 8002f2e:	4658      	mov	r0, fp
 8002f30:	4661      	mov	r1, ip
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	f7fd f945 	bl	80001cc <__aeabi_uldivmod>
 8002f42:	4603      	mov	r3, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f48:	e017      	b.n	8002f7a <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	f04f 0400 	mov.w	r4, #0
 8002f54:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f58:	f144 0100 	adc.w	r1, r4, #0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	f7fd f930 	bl	80001cc <__aeabi_uldivmod>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f72:	e002      	b.n	8002f7a <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	76fb      	strb	r3, [r7, #27]
            break;
 8002f78:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f80:	d308      	bcc.n	8002f94 <UART_SetConfig+0x3b8>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f88:	d204      	bcs.n	8002f94 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e0fd      	b.n	8003190 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e0fa      	b.n	8003190 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa2:	f040 8083 	bne.w	80030ac <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8002fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d85e      	bhi.n	800306c <UART_SetConfig+0x490>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <UART_SetConfig+0x3d8>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002ff9 	.word	0x08002ff9
 8002fbc:	08003019 	.word	0x08003019
 8002fc0:	0800306d 	.word	0x0800306d
 8002fc4:	08003035 	.word	0x08003035
 8002fc8:	0800306d 	.word	0x0800306d
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	0800306d 	.word	0x0800306d
 8002fd4:	08003055 	.word	0x08003055
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7ff f9ba 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	005a      	lsls	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ff6:	e03c      	b.n	8003072 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7ff f9c0 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8002ffc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	005a      	lsls	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	b29b      	uxth	r3, r3
 8003014:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003016:	e02c      	b.n	8003072 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003022:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6852      	ldr	r2, [r2, #4]
 800302a:	fbb3 f3f2 	udiv	r3, r3, r2
 800302e:	b29b      	uxth	r3, r3
 8003030:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003032:	e01e      	b.n	8003072 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003034:	f7ff f8f6 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003038:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	005a      	lsls	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003052:	e00e      	b.n	8003072 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	b29b      	uxth	r3, r3
 8003068:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800306a:	e002      	b.n	8003072 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	76fb      	strb	r3, [r7, #27]
        break;
 8003070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d916      	bls.n	80030a6 <UART_SetConfig+0x4ca>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d212      	bcs.n	80030a6 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b29a      	uxth	r2, r3
 8003096:	89fb      	ldrh	r3, [r7, #14]
 8003098:	4313      	orrs	r3, r2
 800309a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	89fa      	ldrh	r2, [r7, #14]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e074      	b.n	8003190 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	76fb      	strb	r3, [r7, #27]
 80030aa:	e071      	b.n	8003190 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 80030ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d85c      	bhi.n	800316e <UART_SetConfig+0x592>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0x4e0>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	0800316f 	.word	0x0800316f
 80030cc:	08003139 	.word	0x08003139
 80030d0:	0800316f 	.word	0x0800316f
 80030d4:	0800316f 	.word	0x0800316f
 80030d8:	0800316f 	.word	0x0800316f
 80030dc:	08003157 	.word	0x08003157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7ff f936 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 80030e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085a      	lsrs	r2, r3, #1
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	441a      	add	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030fc:	e03a      	b.n	8003174 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fe:	f7ff f93d 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003102:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	085a      	lsrs	r2, r3, #1
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800311a:	e02b      	b.n	8003174 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003126:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6852      	ldr	r2, [r2, #4]
 800312e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003136:	e01d      	b.n	8003174 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003138:	f7ff f874 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 800313c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	085a      	lsrs	r2, r3, #1
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	b29b      	uxth	r3, r3
 8003152:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003154:	e00e      	b.n	8003174 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800316c:	e002      	b.n	8003174 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	76fb      	strb	r3, [r7, #27]
        break;
 8003172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	d908      	bls.n	800318c <UART_SetConfig+0x5b0>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d204      	bcs.n	800318c <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e001      	b.n	8003190 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800319c:	7efb      	ldrb	r3, [r7, #27]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080031a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01a      	beq.n	80032be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d10a      	bne.n	80032be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032fa:	f7fd fe3d 	bl	8000f78 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d10e      	bne.n	800332c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f82a 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e020      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d10e      	bne.n	8003358 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f814 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00a      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	e05d      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d059      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fd fdf2 	bl	8000f78 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e042      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fa:	d123      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003404:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003414:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e00f      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	429a      	cmp	r2, r3
 8003460:	d092      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <__errno>:
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <__errno+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4e0d      	ldr	r6, [pc, #52]	; (80034b0 <__libc_init_array+0x38>)
 800347c:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 800347e:	1ba4      	subs	r4, r4, r6
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	2500      	movs	r5, #0
 8003484:	42a5      	cmp	r5, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	4e0b      	ldr	r6, [pc, #44]	; (80034b8 <__libc_init_array+0x40>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	; (80034bc <__libc_init_array+0x44>)
 800348c:	f000 f920 	bl	80036d0 <_init>
 8003490:	1ba4      	subs	r4, r4, r6
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	2500      	movs	r5, #0
 8003496:	42a5      	cmp	r5, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a0:	4798      	blx	r3
 80034a2:	3501      	adds	r5, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034aa:	4798      	blx	r3
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08003864 	.word	0x08003864
 80034b4:	08003864 	.word	0x08003864
 80034b8:	08003864 	.word	0x08003864
 80034bc:	08003868 	.word	0x08003868

080034c0 <memset>:
 80034c0:	4402      	add	r2, r0
 80034c2:	4603      	mov	r3, r0
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d100      	bne.n	80034ca <memset+0xa>
 80034c8:	4770      	bx	lr
 80034ca:	f803 1b01 	strb.w	r1, [r3], #1
 80034ce:	e7f9      	b.n	80034c4 <memset+0x4>

080034d0 <srand>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <srand+0x38>)
 80034d4:	681c      	ldr	r4, [r3, #0]
 80034d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034d8:	4605      	mov	r5, r0
 80034da:	b97b      	cbnz	r3, 80034fc <srand+0x2c>
 80034dc:	2018      	movs	r0, #24
 80034de:	f000 f87b 	bl	80035d8 <malloc>
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <srand+0x3c>)
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <srand+0x40>)
 80034e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80034e8:	e9c0 2300 	strd	r2, r3, [r0]
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <srand+0x44>)
 80034ee:	6083      	str	r3, [r0, #8]
 80034f0:	230b      	movs	r3, #11
 80034f2:	8183      	strh	r3, [r0, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	2300      	movs	r3, #0
 80034f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80034fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034fe:	2200      	movs	r2, #0
 8003500:	611d      	str	r5, [r3, #16]
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	bd38      	pop	{r3, r4, r5, pc}
 8003506:	bf00      	nop
 8003508:	2000000c 	.word	0x2000000c
 800350c:	abcd330e 	.word	0xabcd330e
 8003510:	e66d1234 	.word	0xe66d1234
 8003514:	0005deec 	.word	0x0005deec

08003518 <rand>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <rand+0x50>)
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003520:	b97b      	cbnz	r3, 8003542 <rand+0x2a>
 8003522:	2018      	movs	r0, #24
 8003524:	f000 f858 	bl	80035d8 <malloc>
 8003528:	4a10      	ldr	r2, [pc, #64]	; (800356c <rand+0x54>)
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <rand+0x58>)
 800352c:	63a0      	str	r0, [r4, #56]	; 0x38
 800352e:	e9c0 2300 	strd	r2, r3, [r0]
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <rand+0x5c>)
 8003534:	6083      	str	r3, [r0, #8]
 8003536:	230b      	movs	r3, #11
 8003538:	8183      	strh	r3, [r0, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	2300      	movs	r3, #0
 800353e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003542:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003544:	480c      	ldr	r0, [pc, #48]	; (8003578 <rand+0x60>)
 8003546:	690a      	ldr	r2, [r1, #16]
 8003548:	694b      	ldr	r3, [r1, #20]
 800354a:	4c0c      	ldr	r4, [pc, #48]	; (800357c <rand+0x64>)
 800354c:	4350      	muls	r0, r2
 800354e:	fb04 0003 	mla	r0, r4, r3, r0
 8003552:	fba2 2304 	umull	r2, r3, r2, r4
 8003556:	4403      	add	r3, r0
 8003558:	1c54      	adds	r4, r2, #1
 800355a:	f143 0500 	adc.w	r5, r3, #0
 800355e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003562:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	2000000c 	.word	0x2000000c
 800356c:	abcd330e 	.word	0xabcd330e
 8003570:	e66d1234 	.word	0xe66d1234
 8003574:	0005deec 	.word	0x0005deec
 8003578:	5851f42d 	.word	0x5851f42d
 800357c:	4c957f2d 	.word	0x4c957f2d

08003580 <time>:
 8003580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <time+0x30>)
 8003584:	4604      	mov	r4, r0
 8003586:	2200      	movs	r2, #0
 8003588:	4669      	mov	r1, sp
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	f000 f812 	bl	80035b4 <_gettimeofday_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	da05      	bge.n	80035a0 <time+0x20>
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	e9cd 2300 	strd	r2, r3, [sp]
 80035a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035a4:	b10c      	cbz	r4, 80035aa <time+0x2a>
 80035a6:	e9c4 0100 	strd	r0, r1, [r4]
 80035aa:	b004      	add	sp, #16
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c

080035b4 <_gettimeofday_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4c07      	ldr	r4, [pc, #28]	; (80035d4 <_gettimeofday_r+0x20>)
 80035b8:	2300      	movs	r3, #0
 80035ba:	4605      	mov	r5, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	f000 f87d 	bl	80036c0 <_gettimeofday>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d102      	bne.n	80035d0 <_gettimeofday_r+0x1c>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	b103      	cbz	r3, 80035d0 <_gettimeofday_r+0x1c>
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	bd38      	pop	{r3, r4, r5, pc}
 80035d2:	bf00      	nop
 80035d4:	200007b8 	.word	0x200007b8

080035d8 <malloc>:
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <malloc+0xc>)
 80035da:	4601      	mov	r1, r0
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	f000 b803 	b.w	80035e8 <_malloc_r>
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <_malloc_r>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	1ccd      	adds	r5, r1, #3
 80035ec:	f025 0503 	bic.w	r5, r5, #3
 80035f0:	3508      	adds	r5, #8
 80035f2:	2d0c      	cmp	r5, #12
 80035f4:	bf38      	it	cc
 80035f6:	250c      	movcc	r5, #12
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	4606      	mov	r6, r0
 80035fc:	db01      	blt.n	8003602 <_malloc_r+0x1a>
 80035fe:	42a9      	cmp	r1, r5
 8003600:	d903      	bls.n	800360a <_malloc_r+0x22>
 8003602:	230c      	movs	r3, #12
 8003604:	6033      	str	r3, [r6, #0]
 8003606:	2000      	movs	r0, #0
 8003608:	bd70      	pop	{r4, r5, r6, pc}
 800360a:	f000 f857 	bl	80036bc <__malloc_lock>
 800360e:	4a21      	ldr	r2, [pc, #132]	; (8003694 <_malloc_r+0xac>)
 8003610:	6814      	ldr	r4, [r2, #0]
 8003612:	4621      	mov	r1, r4
 8003614:	b991      	cbnz	r1, 800363c <_malloc_r+0x54>
 8003616:	4c20      	ldr	r4, [pc, #128]	; (8003698 <_malloc_r+0xb0>)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	b91b      	cbnz	r3, 8003624 <_malloc_r+0x3c>
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f83d 	bl	800369c <_sbrk_r>
 8003622:	6020      	str	r0, [r4, #0]
 8003624:	4629      	mov	r1, r5
 8003626:	4630      	mov	r0, r6
 8003628:	f000 f838 	bl	800369c <_sbrk_r>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d124      	bne.n	800367a <_malloc_r+0x92>
 8003630:	230c      	movs	r3, #12
 8003632:	6033      	str	r3, [r6, #0]
 8003634:	4630      	mov	r0, r6
 8003636:	f000 f842 	bl	80036be <__malloc_unlock>
 800363a:	e7e4      	b.n	8003606 <_malloc_r+0x1e>
 800363c:	680b      	ldr	r3, [r1, #0]
 800363e:	1b5b      	subs	r3, r3, r5
 8003640:	d418      	bmi.n	8003674 <_malloc_r+0x8c>
 8003642:	2b0b      	cmp	r3, #11
 8003644:	d90f      	bls.n	8003666 <_malloc_r+0x7e>
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	50cd      	str	r5, [r1, r3]
 800364a:	18cc      	adds	r4, r1, r3
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f836 	bl	80036be <__malloc_unlock>
 8003652:	f104 000b 	add.w	r0, r4, #11
 8003656:	1d23      	adds	r3, r4, #4
 8003658:	f020 0007 	bic.w	r0, r0, #7
 800365c:	1ac3      	subs	r3, r0, r3
 800365e:	d0d3      	beq.n	8003608 <_malloc_r+0x20>
 8003660:	425a      	negs	r2, r3
 8003662:	50e2      	str	r2, [r4, r3]
 8003664:	e7d0      	b.n	8003608 <_malloc_r+0x20>
 8003666:	428c      	cmp	r4, r1
 8003668:	684b      	ldr	r3, [r1, #4]
 800366a:	bf16      	itet	ne
 800366c:	6063      	strne	r3, [r4, #4]
 800366e:	6013      	streq	r3, [r2, #0]
 8003670:	460c      	movne	r4, r1
 8003672:	e7eb      	b.n	800364c <_malloc_r+0x64>
 8003674:	460c      	mov	r4, r1
 8003676:	6849      	ldr	r1, [r1, #4]
 8003678:	e7cc      	b.n	8003614 <_malloc_r+0x2c>
 800367a:	1cc4      	adds	r4, r0, #3
 800367c:	f024 0403 	bic.w	r4, r4, #3
 8003680:	42a0      	cmp	r0, r4
 8003682:	d005      	beq.n	8003690 <_malloc_r+0xa8>
 8003684:	1a21      	subs	r1, r4, r0
 8003686:	4630      	mov	r0, r6
 8003688:	f000 f808 	bl	800369c <_sbrk_r>
 800368c:	3001      	adds	r0, #1
 800368e:	d0cf      	beq.n	8003630 <_malloc_r+0x48>
 8003690:	6025      	str	r5, [r4, #0]
 8003692:	e7db      	b.n	800364c <_malloc_r+0x64>
 8003694:	20000090 	.word	0x20000090
 8003698:	20000094 	.word	0x20000094

0800369c <_sbrk_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4c06      	ldr	r4, [pc, #24]	; (80036b8 <_sbrk_r+0x1c>)
 80036a0:	2300      	movs	r3, #0
 80036a2:	4605      	mov	r5, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	f7fd f9da 	bl	8000a60 <_sbrk>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d102      	bne.n	80036b6 <_sbrk_r+0x1a>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	b103      	cbz	r3, 80036b6 <_sbrk_r+0x1a>
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	200007b8 	.word	0x200007b8

080036bc <__malloc_lock>:
 80036bc:	4770      	bx	lr

080036be <__malloc_unlock>:
 80036be:	4770      	bx	lr

080036c0 <_gettimeofday>:
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <_gettimeofday+0xc>)
 80036c2:	2258      	movs	r2, #88	; 0x58
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ca:	4770      	bx	lr
 80036cc:	200007b8 	.word	0x200007b8

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
