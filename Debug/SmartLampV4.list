
SmartLampV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ecc  08003ecc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed4  08003ed4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000070  08003f4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08003f4c  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd41  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ded  00000000  00000000  0002cde1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  0002ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002f720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020873  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009787  00000000  00000000  000509eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2b64  00000000  00000000  0005a172  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ccd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  0011cd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0011fe24  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0011fe48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e4c 	.word	0x08003e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003e4c 	.word	0x08003e4c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b972 	b.w	8000ca8 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9e08      	ldr	r6, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	4688      	mov	r8, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d14b      	bne.n	8000a82 <__udivmoddi4+0xa6>
 80009ea:	428a      	cmp	r2, r1
 80009ec:	4615      	mov	r5, r2
 80009ee:	d967      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 80009f0:	fab2 f282 	clz	r2, r2
 80009f4:	b14a      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f6:	f1c2 0720 	rsb	r7, r2, #32
 80009fa:	fa01 f302 	lsl.w	r3, r1, r2
 80009fe:	fa20 f707 	lsr.w	r7, r0, r7
 8000a02:	4095      	lsls	r5, r2
 8000a04:	ea47 0803 	orr.w	r8, r7, r3
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a14:	fa1f fc85 	uxth.w	ip, r5
 8000a18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a20:	fb07 f10c 	mul.w	r1, r7, ip
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18eb      	adds	r3, r5, r3
 8000a2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a2e:	f080 811b 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8118 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a38:	3f02      	subs	r7, #2
 8000a3a:	442b      	add	r3, r5
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a50:	45a4      	cmp	ip, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	192c      	adds	r4, r5, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8107 	bcs.w	8000c6c <__udivmoddi4+0x290>
 8000a5e:	45a4      	cmp	ip, r4
 8000a60:	f240 8104 	bls.w	8000c6c <__udivmoddi4+0x290>
 8000a64:	3802      	subs	r0, #2
 8000a66:	442c      	add	r4, r5
 8000a68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a6c:	eba4 040c 	sub.w	r4, r4, ip
 8000a70:	2700      	movs	r7, #0
 8000a72:	b11e      	cbz	r6, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c6 4300 	strd	r4, r3, [r6]
 8000a7c:	4639      	mov	r1, r7
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0xbe>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	f000 80eb 	beq.w	8000c62 <__udivmoddi4+0x286>
 8000a8c:	2700      	movs	r7, #0
 8000a8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000a92:	4638      	mov	r0, r7
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f783 	clz	r7, r3
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d147      	bne.n	8000b32 <__udivmoddi4+0x156>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0xd0>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80fa 	bhi.w	8000ca0 <__udivmoddi4+0x2c4>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0303 	sbc.w	r3, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d0e0      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000aba:	e9c6 4800 	strd	r4, r8, [r6]
 8000abe:	e7dd      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000ac0:	b902      	cbnz	r2, 8000ac4 <__udivmoddi4+0xe8>
 8000ac2:	deff      	udf	#255	; 0xff
 8000ac4:	fab2 f282 	clz	r2, r2
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	f040 808f 	bne.w	8000bec <__udivmoddi4+0x210>
 8000ace:	1b49      	subs	r1, r1, r5
 8000ad0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ad4:	fa1f f885 	uxth.w	r8, r5
 8000ad8:	2701      	movs	r7, #1
 8000ada:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae8:	fb08 f10c 	mul.w	r1, r8, ip
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x124>
 8000af0:	18eb      	adds	r3, r5, r3
 8000af2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x122>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000afe:	4684      	mov	ip, r0
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b10:	fb08 f800 	mul.w	r8, r8, r0
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x14c>
 8000b18:	192c      	adds	r4, r5, r4
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x14a>
 8000b20:	45a0      	cmp	r8, r4
 8000b22:	f200 80b6 	bhi.w	8000c92 <__udivmoddi4+0x2b6>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 0408 	sub.w	r4, r4, r8
 8000b2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b30:	e79f      	b.n	8000a72 <__udivmoddi4+0x96>
 8000b32:	f1c7 0c20 	rsb	ip, r7, #32
 8000b36:	40bb      	lsls	r3, r7
 8000b38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b40:	fa01 f407 	lsl.w	r4, r1, r7
 8000b44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b50:	4325      	orrs	r5, r4
 8000b52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b56:	0c2c      	lsrs	r4, r5, #16
 8000b58:	fb08 3319 	mls	r3, r8, r9, r3
 8000b5c:	fa1f fa8e 	uxth.w	sl, lr
 8000b60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b64:	fb09 f40a 	mul.w	r4, r9, sl
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b0>
 8000b74:	eb1e 0303 	adds.w	r3, lr, r3
 8000b78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b7c:	f080 8087 	bcs.w	8000c8e <__udivmoddi4+0x2b2>
 8000b80:	429c      	cmp	r4, r3
 8000b82:	f240 8084 	bls.w	8000c8e <__udivmoddi4+0x2b2>
 8000b86:	f1a9 0902 	sub.w	r9, r9, #2
 8000b8a:	4473      	add	r3, lr
 8000b8c:	1b1b      	subs	r3, r3, r4
 8000b8e:	b2ad      	uxth	r5, r5
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba0:	45a2      	cmp	sl, r4
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1da>
 8000ba4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bac:	d26b      	bcs.n	8000c86 <__udivmoddi4+0x2aa>
 8000bae:	45a2      	cmp	sl, r4
 8000bb0:	d969      	bls.n	8000c86 <__udivmoddi4+0x2aa>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4474      	add	r4, lr
 8000bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bba:	fba0 8902 	umull	r8, r9, r0, r2
 8000bbe:	eba4 040a 	sub.w	r4, r4, sl
 8000bc2:	454c      	cmp	r4, r9
 8000bc4:	46c2      	mov	sl, r8
 8000bc6:	464b      	mov	r3, r9
 8000bc8:	d354      	bcc.n	8000c74 <__udivmoddi4+0x298>
 8000bca:	d051      	beq.n	8000c70 <__udivmoddi4+0x294>
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d069      	beq.n	8000ca4 <__udivmoddi4+0x2c8>
 8000bd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000bd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bdc:	40fd      	lsrs	r5, r7
 8000bde:	40fc      	lsrs	r4, r7
 8000be0:	ea4c 0505 	orr.w	r5, ip, r5
 8000be4:	e9c6 5400 	strd	r5, r4, [r6]
 8000be8:	2700      	movs	r7, #0
 8000bea:	e747      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000bec:	f1c2 0320 	rsb	r3, r2, #32
 8000bf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000bf4:	4095      	lsls	r5, r2
 8000bf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	4338      	orrs	r0, r7
 8000c04:	0c01      	lsrs	r1, r0, #16
 8000c06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c0a:	fa1f f885 	uxth.w	r8, r5
 8000c0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c16:	fb07 f308 	mul.w	r3, r7, r8
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x256>
 8000c22:	1869      	adds	r1, r5, r1
 8000c24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c28:	d22f      	bcs.n	8000c8a <__udivmoddi4+0x2ae>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d92d      	bls.n	8000c8a <__udivmoddi4+0x2ae>
 8000c2e:	3f02      	subs	r7, #2
 8000c30:	4429      	add	r1, r5
 8000c32:	1acb      	subs	r3, r1, r3
 8000c34:	b281      	uxth	r1, r0
 8000c36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c42:	fb00 f308 	mul.w	r3, r0, r8
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x27e>
 8000c4a:	1869      	adds	r1, r5, r1
 8000c4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c50:	d217      	bcs.n	8000c82 <__udivmoddi4+0x2a6>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d915      	bls.n	8000c82 <__udivmoddi4+0x2a6>
 8000c56:	3802      	subs	r0, #2
 8000c58:	4429      	add	r1, r5
 8000c5a:	1ac9      	subs	r1, r1, r3
 8000c5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c60:	e73b      	b.n	8000ada <__udivmoddi4+0xfe>
 8000c62:	4637      	mov	r7, r6
 8000c64:	4630      	mov	r0, r6
 8000c66:	e709      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c68:	4607      	mov	r7, r0
 8000c6a:	e6e7      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	e6fb      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c70:	4541      	cmp	r1, r8
 8000c72:	d2ab      	bcs.n	8000bcc <__udivmoddi4+0x1f0>
 8000c74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c78:	eb69 020e 	sbc.w	r2, r9, lr
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	4613      	mov	r3, r2
 8000c80:	e7a4      	b.n	8000bcc <__udivmoddi4+0x1f0>
 8000c82:	4660      	mov	r0, ip
 8000c84:	e7e9      	b.n	8000c5a <__udivmoddi4+0x27e>
 8000c86:	4618      	mov	r0, r3
 8000c88:	e795      	b.n	8000bb6 <__udivmoddi4+0x1da>
 8000c8a:	4667      	mov	r7, ip
 8000c8c:	e7d1      	b.n	8000c32 <__udivmoddi4+0x256>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e77c      	b.n	8000b8c <__udivmoddi4+0x1b0>
 8000c92:	3802      	subs	r0, #2
 8000c94:	442c      	add	r4, r5
 8000c96:	e747      	b.n	8000b28 <__udivmoddi4+0x14c>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	442b      	add	r3, r5
 8000c9e:	e72f      	b.n	8000b00 <__udivmoddi4+0x124>
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	e708      	b.n	8000ab6 <__udivmoddi4+0xda>
 8000ca4:	4637      	mov	r7, r6
 8000ca6:	e6e9      	b.n	8000a7c <__udivmoddi4+0xa0>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <delay_cycles>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Simple imprecise delay method.
void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e003      	b.n	8000cc2 <delay_cycles+0x16>
 8000cba:	bf00      	nop
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3f7      	bcc.n	8000cba <delay_cycles+0xe>
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b598      	push	{r3, r4, r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f000 fca5 	bl	800162a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f87e 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f000 f976 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce8:	f000 f956 	bl	8000f98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cec:	f000 f924 	bl	8000f38 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cf0:	f000 f8e4 	bl	8000ebc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Setup pin: just one for this demo, PA7 is AF#0 (SPI1 SDO / MISO).
  GPIOA->MODER    &= ~( 0x3 << ( 7 * 2 ) );		// clear / set to reset
 8000cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d02:	6013      	str	r3, [r2, #0]
  GPIOA->MODER    |=  ( 0x2 << ( 7 * 2 ) );		// set to alt func mode
 8000d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[ 0 ] &= ~( 0x00 << (7 * 2) );		// clear
 8000d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |= ( 0x5 << (7 * 4) );		// set AF5 for PA7 is SPI1_MOSI (GPIO_AFRL_AFSEL5)
 8000d20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000d2e:	6213      	str	r3, [r2, #32]
  // - Memory-to-peripheral
  // - Circular mode enabled.
  // - Increment memory ptr, don't increment periph ptr.
  // - -bit data size for both source and destination.
  // - High priority.
  DMA1_Channel3->CCR &= ~( DMA_CCR_MEM2MEM |
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <main+0xf8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <main+0xf8>)
 8000d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000d3a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8000d3e:	6013      	str	r3, [r2, #0]
						   DMA_CCR_PL |
						   DMA_CCR_MSIZE |
						   DMA_CCR_PSIZE |
						   DMA_CCR_PINC |
						   DMA_CCR_EN );
  DMA1_Channel3->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <main+0xf8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <main+0xf8>)
 8000d46:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8000d4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d4e:	6013      	str	r3, [r2, #0]
  // Route DMA channel 0 to SPI1 transmit.
//  DMAMUX1_Channel1->CCR &= ~( DMAMUX_CxCR_DMAREQ_ID );
//  DMAMUX1_Channel1->CCR |=  ( 17 << DMAMUX_CxCR_DMAREQ_ID );
  // Set DMA source and destination addresses.
  // Source: Address of the framebuffer.
  DMA1_Channel3->CMAR  = ( uint32_t )&COLORS;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <main+0xf8>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <main+0xfc>)
 8000d54:	60da      	str	r2, [r3, #12]
  // Destination: SPI1 data register.
  DMA1_Channel3->CPAR  = ( uint32_t )&( SPI1->DR );
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <main+0xf8>)
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <main+0x100>)
 8000d5a:	609a      	str	r2, [r3, #8]
  // Set DMA data transfer length (framebuffer length).
  DMA1_Channel3->CNDTR = ( uint16_t )LED_BYTES;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <main+0xf8>)
 8000d5e:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
 8000d62:	605a      	str	r2, [r3, #4]
  // - Assert internal CS signal (software CS pin control)
  // - MSB-first
  // - 8-bit frames
  // - Baud rate prescaler of 8 (for a 6MHz bit-clock)
  // - TX DMA requests enabled.
  SPI1->CR1 &= ~( SPI_CR1_LSBFIRST |
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <main+0x104>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <main+0x104>)
 8000d6a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8000d6e:	6013      	str	r3, [r2, #0]
				  SPI_CR1_BR );
  SPI1->CR1 |=  ( SPI_CR1_SSM |
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <main+0x104>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <main+0x104>)
 8000d76:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 8000d7a:	f043 0303 	orr.w	r3, r3, #3
 8000d7e:	6013      	str	r3, [r2, #0]
				  SPI_CR1_SSI |
				  0x2 << SPI_CR1_BR_Pos |
				  SPI_CR1_MSTR |
				  SPI_CR1_CPOL |
				  SPI_CR1_CPHA );
  SPI1->CR2 &= ~( SPI_CR2_DS );
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <main+0x104>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <main+0x104>)
 8000d86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d8a:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |=  ( 0x7 << SPI_CR2_DS_Pos |
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <main+0x104>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <main+0x104>)
 8000d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6053      	str	r3, [r2, #4]
				  SPI_CR2_TXDMAEN );
  // Enable the SPI peripheral.
  SPI1->CR1 |=  ( SPI_CR1_SPE );
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <main+0x104>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <main+0x104>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	6013      	str	r3, [r2, #0]
  // Enable DMA1 Channel 1 to start sending colors.
  DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <main+0xf8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <main+0xf8>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]
  // Done; now just cycle between colors.
  reset_leds();
 8000db4:	f000 fb34 	bl	8001420 <reset_leds>

  srand(time(NULL));
 8000db8:	2000      	movs	r0, #0
 8000dba:	f002 ff9f 	bl	8003cfc <time>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 ff42 	bl	8003c4c <srand>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		rainbow();
	  set_fire_effect();
 8000dc8:	f000 fb5a 	bl	8001480 <set_fire_effect>
  {
 8000dcc:	e7fc      	b.n	8000dc8 <main+0xf0>
 8000dce:	bf00      	nop
 8000dd0:	40020030 	.word	0x40020030
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	4001300c 	.word	0x4001300c
 8000ddc:	40013000 	.word	0x40013000

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ac      	sub	sp, #176	; 0xb0
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dea:	2244      	movs	r2, #68	; 0x44
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 ff24 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2254      	movs	r2, #84	; 0x54
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 ff16 	bl	8003c3c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000e30:	2313      	movs	r3, #19
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e36:	2307      	movs	r3, #7
 8000e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000e42:	2306      	movs	r3, #6
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f8a5 	bl	8001f9c <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e58:	f000 f8d4 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2303      	movs	r3, #3
 8000e62:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e74:	2103      	movs	r1, #3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fcb0 	bl	80027dc <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e82:	f000 f8bf 	bl	8001004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fea7 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e9c:	f000 f8b2 	bl	8001004 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ea0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ea4:	f001 f824 	bl	8001ef0 <HAL_PWREx_ControlVoltageScaling>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000eae:	f000 f8a9 	bl	8001004 <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	37b0      	adds	r7, #176	; 0xb0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_SPI1_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f16:	2208      	movs	r2, #8
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f1c:	f002 f944 	bl	80031a8 <HAL_SPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 f86d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000588 	.word	0x20000588
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART2_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f7c:	f002 f99e 	bl	80032bc <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f83d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200005ec 	.word	0x200005ec
 8000f94:	40004400 	.word	0x40004400

08000f98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6493      	str	r3, [r2, #72]	; 0x48
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	200d      	movs	r0, #13
 8000fbc:	f000 fc81 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fc0:	200d      	movs	r0, #13
 8000fc2:	f000 fc9a 	bl	80018fa <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_GPIO_Init+0x2c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <MX_GPIO_Init+0x2c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_GPIO_Init+0x2c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2c      	ldr	r2, [pc, #176]	; (800112c <HAL_SPI_MspInit+0xd0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d151      	bne.n	8001122 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 8001084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_SPI_MspInit+0xd4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80010ae:	2382      	movs	r3, #130	; 0x82
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010be:	2305      	movs	r3, #5
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fd98 	bl	8001c00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010d2:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_SPI_MspInit+0xdc>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010de:	2210      	movs	r2, #16
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 8001108:	f000 fc12 	bl	8001930 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001112:	f7ff ff77 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0xd8>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40021000 	.word	0x40021000
 8001134:	2000066c 	.word	0x2000066c
 8001138:	40020030 	.word	0x40020030

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x80>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x80>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f000 fd28 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 fa5c 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Channel3_IRQHandler+0x10>)
 8001222:	f000 fc3d 	bl	8001aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000066c 	.word	0x2000066c

08001230 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x50>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x16>
		heap_end = &end;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <_sbrk+0x50>)
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <_sbrk+0x54>)
 8001244:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <_sbrk+0x50>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <_sbrk+0x50>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	466a      	mov	r2, sp
 8001256:	4293      	cmp	r3, r2
 8001258:	d907      	bls.n	800126a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800125a:	f002 fcc5 	bl	8003be8 <__errno>
 800125e:	4602      	mov	r2, r0
 8001260:	230c      	movs	r3, #12
 8001262:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	e006      	b.n	8001278 <_sbrk+0x48>
	}

	heap_end += incr;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <_sbrk+0x50>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a03      	ldr	r2, [pc, #12]	; (8001280 <_sbrk+0x50>)
 8001274:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000008c 	.word	0x2000008c
 8001284:	200006c0 	.word	0x200006c0

08001288 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <SystemInit+0x64>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a16      	ldr	r2, [pc, #88]	; (80012ec <SystemInit+0x64>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <SystemInit+0x68>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <SystemInit+0x68>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <SystemInit+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <SystemInit+0x68>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <SystemInit+0x68>)
 80012b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <SystemInit+0x68>)
 80012c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SystemInit+0x68>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <SystemInit+0x68>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SystemInit+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SystemInit+0x64>)
 80012da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012de:	609a      	str	r2, [r3, #8]
#endif
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	40021000 	.word	0x40021000

080012f4 <get_rgb_color>:
//delay_cycles( uint32_t cyc ) {
//  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
//}

// Get a 32-bit representation of R/G/B colors.
uint32_t get_rgb_color( uint8_t r, uint8_t g, uint8_t b ) {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	460b      	mov	r3, r1
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	4613      	mov	r3, r2
 8001304:	717b      	strb	r3, [r7, #5]
  return ( g << 16 | r << 8 | b );
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	431a      	orrs	r2, r3
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	4313      	orrs	r3, r2
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <set_color>:
// Set an LED to an RGB color.
void set_color( size_t led_index, uint32_t col ) {
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  size_t led_base = led_index * 24;
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  uint8_t r = ( col >> 8 ) & 0xFF;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	73fb      	strb	r3, [r7, #15]
  uint8_t g = ( col >> 16 ) & 0xFF;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	73bb      	strb	r3, [r7, #14]
  uint8_t b = ( col ) & 0xFF;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	737b      	strb	r3, [r7, #13]
  for ( size_t i = 0; i < 8; ++i ) {
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e019      	b.n	8001380 <set_color+0x60>
    if ( g & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base ] = 0xF8; }
 800134c:	7bba      	ldrb	r2, [r7, #14]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f1c3 0307 	rsb	r3, r3, #7
 8001354:	fa42 f303 	asr.w	r3, r2, r3
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <set_color+0x4e>
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	4a2d      	ldr	r2, [pc, #180]	; (800141c <set_color+0xfc>)
 8001368:	21f8      	movs	r1, #248	; 0xf8
 800136a:	54d1      	strb	r1, [r2, r3]
 800136c:	e005      	b.n	800137a <set_color+0x5a>
    else { COLORS[ i + led_base ] = 0xC0; }
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4413      	add	r3, r2
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <set_color+0xfc>)
 8001376:	21c0      	movs	r1, #192	; 0xc0
 8001378:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d9e2      	bls.n	800134c <set_color+0x2c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	e01b      	b.n	80013c4 <set_color+0xa4>
    if ( r & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 8 ] = 0xF8; }
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f1c3 0307 	rsb	r3, r3, #7
 8001394:	fa42 f303 	asr.w	r3, r2, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <set_color+0x90>
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4413      	add	r3, r2
 80013a6:	3308      	adds	r3, #8
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <set_color+0xfc>)
 80013aa:	21f8      	movs	r1, #248	; 0xf8
 80013ac:	54d1      	strb	r1, [r2, r3]
 80013ae:	e006      	b.n	80013be <set_color+0x9e>
    else { COLORS[ i + led_base + 8 ] = 0xC0; }
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	3308      	adds	r3, #8
 80013b8:	4a18      	ldr	r2, [pc, #96]	; (800141c <set_color+0xfc>)
 80013ba:	21c0      	movs	r1, #192	; 0xc0
 80013bc:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d9e0      	bls.n	800138c <set_color+0x6c>
  }
  for ( size_t i = 0; i < 8; ++i ) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e01b      	b.n	8001408 <set_color+0xe8>
    if ( b & ( 1 << ( 7 - i ) ) ) { COLORS[ i + led_base + 16 ] = 0xF8; }
 80013d0:	7b7a      	ldrb	r2, [r7, #13]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f1c3 0307 	rsb	r3, r3, #7
 80013d8:	fa42 f303 	asr.w	r3, r2, r3
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <set_color+0xd4>
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4413      	add	r3, r2
 80013ea:	3310      	adds	r3, #16
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <set_color+0xfc>)
 80013ee:	21f8      	movs	r1, #248	; 0xf8
 80013f0:	54d1      	strb	r1, [r2, r3]
 80013f2:	e006      	b.n	8001402 <set_color+0xe2>
    else { COLORS[ i + led_base + 16 ] = 0xC0; }
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	3310      	adds	r3, #16
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <set_color+0xfc>)
 80013fe:	21c0      	movs	r1, #192	; 0xc0
 8001400:	54d1      	strb	r1, [r2, r3]
  for ( size_t i = 0; i < 8; ++i ) {
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d9e0      	bls.n	80013d0 <set_color+0xb0>
  }
}
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000098 	.word	0x20000098

08001420 <reset_leds>:
    set_color( i, get_rgb_color( r, g, b ) );
  }
}

// reset leds
void reset_leds( void ) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	// Set initial colors to 'off'.
	for ( size_t i = 0; i < 300; ++i ) {
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e00c      	b.n	8001446 <reset_leds+0x26>
		set_color( i, get_rgb_color( 0x00, 0x00, 0x00 ) );
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ff5f 	bl	80012f4 <get_rgb_color>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff70 	bl	8001320 <set_color>
	for ( size_t i = 0; i < 300; ++i ) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800144c:	d3ee      	bcc.n	800142c <reset_leds+0xc>
	}
	// Set the latching period to all 0s.
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 800144e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	e007      	b.n	8001466 <reset_leds+0x46>
		COLORS[ i ] = 0x00;
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <reset_leds+0x58>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	for ( size_t i = LED_BYTES - 64; i < LED_BYTES; ++i ) {
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f5b3 6f9e 	cmp.w	r3, #1264	; 0x4f0
 800146c:	d3f3      	bcc.n	8001456 <reset_leds+0x36>
	}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000098 	.word	0x20000098
 800147c:	00000000 	.word	0x00000000

08001480 <set_fire_effect>:
}

/*
 * fire effect based on this gradient https://www.schemecolor.com/fire-gradient.php
 */
void set_fire_effect(void) {
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b092      	sub	sp, #72	; 0x48
 8001484:	af00      	add	r7, sp, #0
	int grid_x = 6;
 8001486:	2306      	movs	r3, #6
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
	int grid_y = 6;
 800148a:	2306      	movs	r3, #6
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
	 * {191, 32, 0},	yellow orange
	 * {243, 60, 4},	light orange
	 *
	 * gradient table organize in a "fire" pattern
	 */
	uint8_t fire_colors[10][3] = {
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <set_fire_effect+0x150>)
 8001490:	463c      	mov	r4, r7
 8001492:	461d      	mov	r5, r3
 8001494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001498:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800149c:	c407      	stmia	r4!, {r0, r1, r2}
 800149e:	8023      	strh	r3, [r4, #0]
//			 {80, 8, 0},
//			 {105, 2, 0},
//			 {128, 0, 0}
//	};

	const uint8_t FIRE_COLOR_SIZE = 10;
 80014a0:	230a      	movs	r3, #10
 80014a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	size_t i = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	; 0x44
	// generate a pyramid shape
	for (size_t x=0; x<grid_x-1; x++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	643b      	str	r3, [r7, #64]	; 0x40
 80014ae:	e07f      	b.n	80015b0 <set_fire_effect+0x130>
		size_t iterator = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (size_t y=0; y<grid_y-1, i<NUM_LEDS; y++, i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b8:	e071      	b.n	800159e <set_fire_effect+0x11e>
			double brightness = (double)rand() / (double)RAND_MAX;
 80014ba:	f002 fbeb 	bl	8003c94 <rand>
 80014be:	4603      	mov	r3, r0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffd7 	bl	8000474 <__aeabi_i2d>
 80014c6:	a340      	add	r3, pc, #256	; (adr r3, 80015c8 <set_fire_effect+0x148>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f966 	bl	800079c <__aeabi_ddiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
			iterator = (x+y) % FIRE_COLOR_SIZE;
 80014d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014dc:	4413      	add	r3, r2
 80014de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80014e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80014e6:	fb02 f201 	mul.w	r2, r2, r1
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			set_color(i, get_rgb_color(fire_colors[iterator][0]*brightness, fire_colors[iterator][1]*brightness, fire_colors[iterator][2]*brightness));
 80014ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80014fa:	4413      	add	r3, r2
 80014fc:	3b48      	subs	r3, #72	; 0x48
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ffb7 	bl	8000474 <__aeabi_i2d>
 8001506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800150a:	f7ff f81d 	bl	8000548 <__aeabi_dmul>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff fa29 	bl	800096c <__aeabi_d2uiz>
 800151a:	4603      	mov	r3, r0
 800151c:	b2dc      	uxtb	r4, r3
 800151e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800152a:	4413      	add	r3, r2
 800152c:	3b47      	subs	r3, #71	; 0x47
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff9f 	bl	8000474 <__aeabi_i2d>
 8001536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800153a:	f7ff f805 	bl	8000548 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fa11 	bl	800096c <__aeabi_d2uiz>
 800154a:	4603      	mov	r3, r0
 800154c:	b2dd      	uxtb	r5, r3
 800154e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800155a:	4413      	add	r3, r2
 800155c:	3b46      	subs	r3, #70	; 0x46
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff87 	bl	8000474 <__aeabi_i2d>
 8001566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff f9f9 	bl	800096c <__aeabi_d2uiz>
 800157a:	4603      	mov	r3, r0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4629      	mov	r1, r5
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff feb6 	bl	80012f4 <get_rgb_color>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800158e:	f7ff fec7 	bl	8001320 <set_color>
		for (size_t y=0; y<grid_y-1, i<NUM_LEDS; y++, i++) {
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	3301      	adds	r3, #1
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159a:	3301      	adds	r3, #1
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
 800159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a0:	2b31      	cmp	r3, #49	; 0x31
 80015a2:	d98a      	bls.n	80014ba <set_fire_effect+0x3a>
		}
		delay_cycles( 500000 );
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <set_fire_effect+0x154>)
 80015a6:	f7ff fb81 	bl	8000cac <delay_cycles>
	for (size_t x=0; x<grid_x-1; x++) {
 80015aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ac:	3301      	adds	r3, #1
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	3b01      	subs	r3, #1
 80015b4:	461a      	mov	r2, r3
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	4293      	cmp	r3, r2
 80015ba:	f4ff af79 	bcc.w	80014b0 <set_fire_effect+0x30>
//		delay_cycles( 10000 );
	}
}
 80015be:	bf00      	nop
 80015c0:	3748      	adds	r7, #72	; 0x48
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	ffc00000 	.word	0xffc00000
 80015cc:	41dfffff 	.word	0x41dfffff
 80015d0:	08003e64 	.word	0x08003e64
 80015d4:	0007a120 	.word	0x0007a120

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LoopForever+0xe>)
	adds	r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
	ldr	r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <LoopForever+0x16>)
	cmp	r2, r3
 80015fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff fe41 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 faf5 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fb65 	bl	8000cd8 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001610:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001614:	08003edc 	.word	0x08003edc
	ldr	r0, =_sdata
 8001618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800161c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001620:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001624:	200006bc 	.word	0x200006bc

08001628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_IRQHandler>

0800162a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f939 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f80e 	bl	800165c <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	e001      	b.n	8001650 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164c:	f7ff fce2 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001650:	79fb      	ldrb	r3, [r7, #7]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_InitTick+0x68>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_InitTick+0x6c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_InitTick+0x68>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800167c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f946 	bl	8001916 <HAL_SYSTICK_Config>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d809      	bhi.n	80016aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001696:	2200      	movs	r2, #0
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	f04f 30ff 	mov.w	r0, #4294967295
 800169e:	f000 f910 	bl	80018c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0x70>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e007      	b.n	80016ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e004      	b.n	80016ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e001      	b.n	80016ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_IncTick+0x1c>)
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200006b4 	.word	0x200006b4
 80016f0:	20000008 	.word	0x20000008

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200006b4 	.word	0x200006b4

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e098      	b.n	8001a74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_DMA_Init+0x150>)
 800194a:	429a      	cmp	r2, r3
 800194c:	d80f      	bhi.n	800196e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_DMA_Init+0x154>)
 8001956:	4413      	add	r3, r2
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_DMA_Init+0x158>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	009a      	lsls	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_DMA_Init+0x15c>)
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
 800196c:	e00e      	b.n	800198c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_DMA_Init+0x160>)
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_DMA_Init+0x158>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	009a      	lsls	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a42      	ldr	r2, [pc, #264]	; (8001a94 <HAL_DMA_Init+0x164>)
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e6:	d039      	beq.n	8001a5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_DMA_Init+0x15c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d11a      	bne.n	8001a28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_DMA_Init+0x168>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f003 031c 	and.w	r3, r3, #28
 80019fe:	210f      	movs	r1, #15
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4924      	ldr	r1, [pc, #144]	; (8001a98 <HAL_DMA_Init+0x168>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_DMA_Init+0x168>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	491d      	ldr	r1, [pc, #116]	; (8001a98 <HAL_DMA_Init+0x168>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
 8001a26:	e019      	b.n	8001a5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_DMA_Init+0x16c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f003 031c 	and.w	r3, r3, #28
 8001a34:	210f      	movs	r1, #15
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4917      	ldr	r1, [pc, #92]	; (8001a9c <HAL_DMA_Init+0x16c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_DMA_Init+0x16c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 031c 	and.w	r3, r3, #28
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	4911      	ldr	r1, [pc, #68]	; (8001a9c <HAL_DMA_Init+0x16c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40020407 	.word	0x40020407
 8001a84:	bffdfff8 	.word	0xbffdfff8
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	bffdfbf8 	.word	0xbffdfbf8
 8001a94:	40020400 	.word	0x40020400
 8001a98:	400200a8 	.word	0x400200a8
 8001a9c:	400204a8 	.word	0x400204a8

08001aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f003 031c 	and.w	r3, r3, #28
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x7a>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d021      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0204 	bic.w	r2, r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f003 021c 	and.w	r2, r3, #28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2104      	movs	r1, #4
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d071      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	e06c      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 031c 	and.w	r3, r3, #28
 8001b22:	2202      	movs	r2, #2
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02e      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xec>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d029      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 020a 	bic.w	r2, r2, #10
 8001b54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f003 021c 	and.w	r2, r3, #28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d038      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b8a:	e033      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f003 031c 	and.w	r3, r3, #28
 8001b94:	2208      	movs	r2, #8
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d02a      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x156>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d025      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 020e 	bic.w	r2, r2, #14
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f003 021c 	and.w	r2, r3, #28
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
}
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e148      	b.n	8001ea2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 813a 	beq.w	8001e9c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d00b      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3c:	2b11      	cmp	r3, #17
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0xea>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d123      	bne.n	8001d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0203 	and.w	r2, r3, #3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8094 	beq.w	8001e9c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1d0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1cc>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dcc:	2307      	movs	r3, #7
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de6:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e18:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aeaf 	bne.w	8001c10 <HAL_GPIO_Init+0x10>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_PWREx_GetVoltageRange+0x18>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efe:	d130      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d038      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2232      	movs	r2, #50	; 0x32
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	e002      	b.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d102      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f2      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d110      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e00f      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d007      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f78:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000
 8001f94:	20000000 	.word	0x20000000
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f000 bc11 	b.w	80027d2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fba:	4b9e      	ldr	r3, [pc, #632]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80e4 	beq.w	800219a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4c>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	f040 808b 	bne.w	80020f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f040 8087 	bne.w	80020f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x64>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e3e8      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_RCC_OscConfig+0x7e>
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002018:	e005      	b.n	8002026 <HAL_RCC_OscConfig+0x8a>
 800201a:	4b86      	ldr	r3, [pc, #536]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002026:	4293      	cmp	r3, r2
 8002028:	d223      	bcs.n	8002072 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd78 	bl	8002b24 <RCC_SetFlashLatencyFromMSIRange>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e3c9      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4977      	ldr	r1, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205c:	4b75      	ldr	r3, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	4972      	ldr	r1, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e025      	b.n	80020be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002072:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	496a      	ldr	r1, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	4965      	ldr	r1, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fd38 	bl	8002b24 <RCC_SetFlashLatencyFromMSIRange>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e389      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020be:	f000 fc6f 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 80020c2:	4601      	mov	r1, r0
 80020c4:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	4a5a      	ldr	r2, [pc, #360]	; (8002238 <HAL_RCC_OscConfig+0x29c>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	fa21 f303 	lsr.w	r3, r1, r3
 80020da:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x2a0>)
 80020dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x2a4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff faba 	bl	800165c <HAL_InitTick>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d052      	beq.n	8002198 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	e36d      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d032      	beq.n	8002164 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fe:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800210a:	f7ff faf3 	bl	80016f4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002112:	f7ff faef 	bl	80016f4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e356      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	493a      	ldr	r1, [pc, #232]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
 8002162:	e01a      	b.n	800219a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a32      	ldr	r2, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002170:	f7ff fac0 	bl	80016f4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002178:	f7ff fabc 	bl	80016f4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e323      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1dc>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d073      	beq.n	800228e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x21c>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d10e      	bne.n	80021d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d10b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d063      	beq.n	800228c <HAL_RCC_OscConfig+0x2f0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d15f      	bne.n	800228c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e300      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x24c>
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0x288>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x270>
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x288>
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff fa62 	bl	80016f4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	e010      	b.n	8002256 <HAL_RCC_OscConfig+0x2ba>
 8002234:	40021000 	.word	0x40021000
 8002238:	08003e84 	.word	0x08003e84
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fa56 	bl	80016f4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e2bd      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4baf      	ldr	r3, [pc, #700]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x2a8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fa46 	bl	80016f4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fa42 	bl	80016f4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2a9      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x2d0>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d060      	beq.n	800235c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x310>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d119      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d116      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_OscConfig+0x328>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e286      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b93      	ldr	r3, [pc, #588]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	4990      	ldr	r1, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	e040      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a8b      	ldr	r2, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff fa01 	bl	80016f4 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff f9fd 	bl	80016f4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e264      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	497c      	ldr	r1, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	e018      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f9dd 	bl	80016f4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff f9d9 	bl	80016f4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e240      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002350:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	4a67      	ldr	r2, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f9b8 	bl	80016f4 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff f9b4 	bl	80016f4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e21b      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239a:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x3ec>
 80023a8:	e01b      	b.n	80023e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7ff f99b 	bl	80016f4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff f997 	bl	80016f4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1fe      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a6 	beq.w	800253c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023f4:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a43      	ldr	r2, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d118      	bne.n	800245a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002434:	f7ff f95e 	bl	80016f4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7ff f95a 	bl	80016f4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1c1      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x4d8>
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002472:	e024      	b.n	80024be <HAL_RCC_OscConfig+0x522>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d110      	bne.n	800249e <HAL_RCC_OscConfig+0x502>
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a24      	ldr	r2, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249c:	e00f      	b.n	80024be <HAL_RCC_OscConfig+0x522>
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff f915 	bl	80016f4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7ff f911 	bl	80016f4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e176      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ed      	beq.n	80024ce <HAL_RCC_OscConfig+0x532>
 80024f2:	e01a      	b.n	800252a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff f8fe 	bl	80016f4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7ff f8fa 	bl	80016f4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d906      	bls.n	800251c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e15f      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	4baa      	ldr	r3, [pc, #680]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e8      	bne.n	80024fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4aa4      	ldr	r2, [pc, #656]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01c      	beq.n	800258a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002550:	4b9d      	ldr	r3, [pc, #628]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002556:	4a9c      	ldr	r2, [pc, #624]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff f8c8 	bl	80016f4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002568:	f7ff f8c4 	bl	80016f4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e12b      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257a:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCC_OscConfig+0x5cc>
 8002588:	e01b      	b.n	80025c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258a:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800258c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002590:	4a8d      	ldr	r2, [pc, #564]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff f8ab 	bl	80016f4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a2:	f7ff f8a7 	bl	80016f4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10e      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b4:	4b84      	ldr	r3, [pc, #528]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80025b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ef      	bne.n	80025a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8102 	beq.w	80027d0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 80c5 	bne.w	8002760 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025d6:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d12c      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	3b01      	subs	r3, #1
 80025f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d123      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d11b      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d113      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	3b01      	subs	r3, #1
 800262a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d109      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	3b01      	subs	r3, #1
 800263e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d067      	beq.n	8002714 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d062      	beq.n	8002710 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0bb      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5a      	ldr	r2, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002664:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002666:	f7ff f845 	bl	80016f4 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff f841 	bl	80016f4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0a8      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCC_OscConfig+0x830>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800269c:	3a01      	subs	r2, #1
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026a6:	0212      	lsls	r2, r2, #8
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ae:	0852      	lsrs	r2, r2, #1
 80026b0:	3a01      	subs	r2, #1
 80026b2:	0552      	lsls	r2, r2, #21
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0652      	lsls	r2, r2, #25
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c6:	06d2      	lsls	r2, r2, #27
 80026c8:	430a      	orrs	r2, r1
 80026ca:	493f      	ldr	r1, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e8:	f7ff f804 	bl	80016f4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff f800 	bl	80016f4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e067      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800270e:	e05f      	b.n	80027d0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e05e      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800272c:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002738:	f7fe ffdc 	bl	80016f4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe ffd8 	bl	80016f4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e03f      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x7a4>
 800275e:	e037      	b.n	80027d0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d02d      	beq.n	80027c2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800276c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002770:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 8002790:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe ffab 	bl	80016f4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe ffa7 	bl	80016f4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e00e      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_RCC_OscConfig+0x82c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x806>
 80027c0:	e006      	b.n	80027d0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e005      	b.n	80027d2 <HAL_RCC_OscConfig+0x836>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0c8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d910      	bls.n	8002820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4961      	ldr	r1, [pc, #388]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b0      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d04c      	beq.n	80028c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002834:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d121      	bne.n	8002884 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e09e      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d107      	bne.n	800285c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d115      	bne.n	8002884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e092      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e086      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e07e      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002884:	4b42      	ldr	r3, [pc, #264]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 0203 	bic.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	493f      	ldr	r1, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002896:	f7fe ff2d 	bl	80016f4 <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289e:	f7fe ff29 	bl	80016f4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e066      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 020c 	and.w	r2, r3, #12
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d1eb      	bne.n	800289e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	492c      	ldr	r1, [pc, #176]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d210      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4924      	ldr	r1, [pc, #144]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e036      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4910      	ldr	r1, [pc, #64]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002952:	f000 f825 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002956:	4601      	mov	r1, r0
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	fa21 f303 	lsr.w	r3, r1, r3
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fe70 	bl	800165c <HAL_InitTick>
 800297c:	4603      	mov	r3, r0
 800297e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002980:	7afb      	ldrb	r3, [r7, #11]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
 8002994:	08003e84 	.word	0x08003e84
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d121      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d11e      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e005      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e004      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d133      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0xaa>
 8002a42:	e005      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a46:	617b      	str	r3, [r7, #20]
      break;
 8002a48:	e005      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4c:	617b      	str	r3, [r7, #20]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	617b      	str	r3, [r7, #20]
      break;
 8002a54:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	3301      	adds	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	fb02 f203 	mul.w	r2, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0e5b      	lsrs	r3, r3, #25
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a96:	69bb      	ldr	r3, [r7, #24]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08003e9c 	.word	0x08003e9c
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08003e94 	.word	0x08003e94

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002afc:	f7ff ffda 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002b00:	4601      	mov	r1, r0
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08003e94 	.word	0x08003e94

08002b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b3c:	f7ff f9ca 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002b40:	6178      	str	r0, [r7, #20]
 8002b42:	e014      	b.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b5c:	f7ff f9ba 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b74:	d10b      	bne.n	8002b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d919      	bls.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b80:	d902      	bls.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b82:	2302      	movs	r3, #2
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e013      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b88:	2301      	movs	r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	e010      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d902      	bls.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b94:	2303      	movs	r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	e00a      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d102      	bne.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e004      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d101      	bne.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 0207 	bic.w	r2, r3, #7
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40022000 	.word	0x40022000

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bec:	2300      	movs	r3, #0
 8002bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02f      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c08:	d005      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c14:	e00f      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c16:	4bac      	ldr	r3, [pc, #688]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4aab      	ldr	r2, [pc, #684]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c22:	e00c      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f9cc 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c34:	e003      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	74fb      	strb	r3, [r7, #19]
      break;
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c44:	4ba0      	ldr	r3, [pc, #640]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	499d      	ldr	r1, [pc, #628]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c5a:	e001      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8099 	beq.w	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c72:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b8f      	ldr	r3, [pc, #572]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a8e      	ldr	r2, [pc, #568]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca4:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fd20 	bl	80016f4 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cb6:	e009      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb8:	f7fe fd1c 	bl	80016f4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ccc:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d155      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cde:	4b7a      	ldr	r3, [pc, #488]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01e      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d019      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d16:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	4a6a      	ldr	r2, [pc, #424]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d26:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fcdc 	bl	80016f4 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fcd8 	bl	80016f4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d902      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	74fb      	strb	r3, [r7, #19]
            break;
 8002d56:	e006      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ec      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6c:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	4953      	ldr	r1, [pc, #332]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d82:	e004      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
 8002d88:	e001      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7c7b      	ldrb	r3, [r7, #17]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dac:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4943      	ldr	r1, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f023 020c 	bic.w	r2, r3, #12
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	493a      	ldr	r1, [pc, #232]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	4932      	ldr	r1, [pc, #200]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	4929      	ldr	r1, [pc, #164]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4921      	ldr	r1, [pc, #132]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4918      	ldr	r1, [pc, #96]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4910      	ldr	r1, [pc, #64]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02c      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a02      	ldr	r2, [pc, #8]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec4:	60d3      	str	r3, [r2, #12]
 8002ec6:	e015      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f871 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f00:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f842 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6c:	4915      	ldr	r1, [pc, #84]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f81f 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fba:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d10d      	bne.n	800300e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
       ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d044      	beq.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e041      	b.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d00c      	beq.n	8003036 <RCCEx_PLLSAI1_Config+0x6e>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d013      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x80>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d120      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003024:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11d      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e01a      	b.n	800306c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e013      	b.n	8003070 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003064:	e006      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      break;
 800306a:	e004      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800306c:	bf00      	nop
 800306e:	e002      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003070:	bf00      	nop
 8003072:	e000      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003074:	bf00      	nop
    }

    if(status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	3b01      	subs	r3, #1
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	430b      	orrs	r3, r1
 8003092:	4944      	ldr	r1, [pc, #272]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d17c      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030aa:	f7fe fb23 	bl	80016f4 <HAL_GetTick>
 80030ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030b0:	e009      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b2:	f7fe fb1f 	bl	80016f4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d902      	bls.n	80030c6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	73fb      	strb	r3, [r7, #15]
        break;
 80030c4:	e005      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ef      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d15f      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d110      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	0211      	lsls	r1, r2, #8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	06d2      	lsls	r2, r2, #27
 80030f6:	430a      	orrs	r2, r1
 80030f8:	492a      	ldr	r1, [pc, #168]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]
 80030fe:	e027      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d112      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800310e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	0211      	lsls	r1, r2, #8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6912      	ldr	r2, [r2, #16]
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	430a      	orrs	r2, r1
 8003124:	491f      	ldr	r1, [pc, #124]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]
 800312a:	e011      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	0211      	lsls	r1, r2, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6952      	ldr	r2, [r2, #20]
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0652      	lsls	r2, r2, #25
 8003148:	430a      	orrs	r2, r1
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe faca 	bl	80016f4 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003162:	e009      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003164:	f7fe fac6 	bl	80016f4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	73fb      	strb	r3, [r7, #15]
          break;
 8003176:	e005      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4904      	ldr	r1, [pc, #16]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07c      	b.n	80032b4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd ff41 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fa:	d902      	bls.n	8003202 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e002      	b.n	8003208 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003210:	d007      	beq.n	8003222 <HAL_SPI_Init+0x7a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800321a:	d002      	beq.n	8003222 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003232:	d903      	bls.n	800323c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
 800323a:	e002      	b.n	8003242 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	ea42 0103 	orr.w	r1, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0204 	and.w	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	ea42 0103 	orr.w	r1, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e040      	b.n	8003350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd ff2c 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f82c 	bl	8003358 <UART_SetConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb06 	bl	8003924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fb8d 	bl	8003a68 <UART_CheckIdleState>
 800334e:	4603      	mov	r3, r0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800335c:	b08a      	sub	sp, #40	; 0x28
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4313      	orrs	r3, r2
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4bb3      	ldr	r3, [pc, #716]	; (800365c <UART_SetConfig+0x304>)
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	430b      	orrs	r3, r1
 8003398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4aa9      	ldr	r2, [pc, #676]	; (8003660 <UART_SetConfig+0x308>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4313      	orrs	r3, r2
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4aa0      	ldr	r2, [pc, #640]	; (8003664 <UART_SetConfig+0x30c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d126      	bne.n	8003436 <UART_SetConfig+0xde>
 80033e8:	4b9f      	ldr	r3, [pc, #636]	; (8003668 <UART_SetConfig+0x310>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d81a      	bhi.n	800342c <UART_SetConfig+0xd4>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0xa4>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800341d 	.word	0x0800341d
 8003404:	08003415 	.word	0x08003415
 8003408:	08003425 	.word	0x08003425
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e080      	b.n	8003516 <UART_SetConfig+0x1be>
 8003414:	2302      	movs	r3, #2
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e07c      	b.n	8003516 <UART_SetConfig+0x1be>
 800341c:	2304      	movs	r3, #4
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e078      	b.n	8003516 <UART_SetConfig+0x1be>
 8003424:	2308      	movs	r3, #8
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e074      	b.n	8003516 <UART_SetConfig+0x1be>
 800342c:	2310      	movs	r3, #16
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003432:	bf00      	nop
 8003434:	e06f      	b.n	8003516 <UART_SetConfig+0x1be>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8c      	ldr	r2, [pc, #560]	; (800366c <UART_SetConfig+0x314>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d138      	bne.n	80034b2 <UART_SetConfig+0x15a>
 8003440:	4b89      	ldr	r3, [pc, #548]	; (8003668 <UART_SetConfig+0x310>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d82c      	bhi.n	80034a8 <UART_SetConfig+0x150>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0xfc>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003489 	.word	0x08003489
 8003458:	080034a9 	.word	0x080034a9
 800345c:	080034a9 	.word	0x080034a9
 8003460:	080034a9 	.word	0x080034a9
 8003464:	08003499 	.word	0x08003499
 8003468:	080034a9 	.word	0x080034a9
 800346c:	080034a9 	.word	0x080034a9
 8003470:	080034a9 	.word	0x080034a9
 8003474:	08003491 	.word	0x08003491
 8003478:	080034a9 	.word	0x080034a9
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034a1 	.word	0x080034a1
 8003488:	2300      	movs	r3, #0
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e042      	b.n	8003516 <UART_SetConfig+0x1be>
 8003490:	2302      	movs	r3, #2
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e03e      	b.n	8003516 <UART_SetConfig+0x1be>
 8003498:	2304      	movs	r3, #4
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e03a      	b.n	8003516 <UART_SetConfig+0x1be>
 80034a0:	2308      	movs	r3, #8
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a6:	e036      	b.n	8003516 <UART_SetConfig+0x1be>
 80034a8:	2310      	movs	r3, #16
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ae:	bf00      	nop
 80034b0:	e031      	b.n	8003516 <UART_SetConfig+0x1be>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <UART_SetConfig+0x308>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d129      	bne.n	8003510 <UART_SetConfig+0x1b8>
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <UART_SetConfig+0x310>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d014      	beq.n	80034f6 <UART_SetConfig+0x19e>
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d802      	bhi.n	80034d8 <UART_SetConfig+0x180>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <UART_SetConfig+0x18e>
 80034d6:	e016      	b.n	8003506 <UART_SetConfig+0x1ae>
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034dc:	d007      	beq.n	80034ee <UART_SetConfig+0x196>
 80034de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034e2:	d00c      	beq.n	80034fe <UART_SetConfig+0x1a6>
 80034e4:	e00f      	b.n	8003506 <UART_SetConfig+0x1ae>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ec:	e013      	b.n	8003516 <UART_SetConfig+0x1be>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f4:	e00f      	b.n	8003516 <UART_SetConfig+0x1be>
 80034f6:	2304      	movs	r3, #4
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fc:	e00b      	b.n	8003516 <UART_SetConfig+0x1be>
 80034fe:	2308      	movs	r3, #8
 8003500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003504:	e007      	b.n	8003516 <UART_SetConfig+0x1be>
 8003506:	2310      	movs	r3, #16
 8003508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <UART_SetConfig+0x1be>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a51      	ldr	r2, [pc, #324]	; (8003660 <UART_SetConfig+0x308>)
 800351c:	4293      	cmp	r3, r2
 800351e:	f040 80fa 	bne.w	8003716 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003526:	2b08      	cmp	r3, #8
 8003528:	d823      	bhi.n	8003572 <UART_SetConfig+0x21a>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0x1d8>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003555 	.word	0x08003555
 8003534:	08003573 	.word	0x08003573
 8003538:	0800355d 	.word	0x0800355d
 800353c:	08003573 	.word	0x08003573
 8003540:	08003563 	.word	0x08003563
 8003544:	08003573 	.word	0x08003573
 8003548:	08003573 	.word	0x08003573
 800354c:	08003573 	.word	0x08003573
 8003550:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003554:	f7ff faba 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003558:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800355a:	e00d      	b.n	8003578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800355c:	4b44      	ldr	r3, [pc, #272]	; (8003670 <UART_SetConfig+0x318>)
 800355e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003560:	e00a      	b.n	8003578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003562:	f7ff fa1d 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8003566:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003568:	e006      	b.n	8003578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003570:	e002      	b.n	8003578 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	76fb      	strb	r3, [r7, #27]
        break;
 8003576:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 81c6 	beq.w	800390c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	d305      	bcc.n	800359c <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	d902      	bls.n	80035a2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e1b4      	b.n	800390c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80035a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	f200 80a2 	bhi.w	80036f0 <UART_SetConfig+0x398>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x25c>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080036f1 	.word	0x080036f1
 80035bc:	08003627 	.word	0x08003627
 80035c0:	080036f1 	.word	0x080036f1
 80035c4:	08003679 	.word	0x08003679
 80035c8:	080036f1 	.word	0x080036f1
 80035cc:	080036f1 	.word	0x080036f1
 80035d0:	080036f1 	.word	0x080036f1
 80035d4:	080036c7 	.word	0x080036c7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff fa78 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 80035dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0214      	lsls	r4, r2, #8
 80035f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80035f4:	020b      	lsls	r3, r1, #8
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6852      	ldr	r2, [r2, #4]
 80035fa:	0852      	lsrs	r2, r2, #1
 80035fc:	4611      	mov	r1, r2
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	eb13 0b01 	adds.w	fp, r3, r1
 8003606:	eb44 0c02 	adc.w	ip, r4, r2
 800360a:	4658      	mov	r0, fp
 800360c:	4661      	mov	r1, ip
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f04f 0400 	mov.w	r4, #0
 8003616:	461a      	mov	r2, r3
 8003618:	4623      	mov	r3, r4
 800361a:	f7fd f9c7 	bl	80009ac <__aeabi_uldivmod>
 800361e:	4603      	mov	r3, r0
 8003620:	460c      	mov	r4, r1
 8003622:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003624:	e067      	b.n	80036f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	4910      	ldr	r1, [pc, #64]	; (8003674 <UART_SetConfig+0x31c>)
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	eb13 0b01 	adds.w	fp, r3, r1
 800363a:	eb44 0c02 	adc.w	ip, r4, r2
 800363e:	4658      	mov	r0, fp
 8003640:	4661      	mov	r1, ip
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	461a      	mov	r2, r3
 800364c:	4623      	mov	r3, r4
 800364e:	f7fd f9ad 	bl	80009ac <__aeabi_uldivmod>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003658:	e04d      	b.n	80036f6 <UART_SetConfig+0x39e>
 800365a:	bf00      	nop
 800365c:	efff69f3 	.word	0xefff69f3
 8003660:	40008000 	.word	0x40008000
 8003664:	40013800 	.word	0x40013800
 8003668:	40021000 	.word	0x40021000
 800366c:	40004400 	.word	0x40004400
 8003670:	00f42400 	.word	0x00f42400
 8003674:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003678:	f7ff f992 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800367c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4619      	mov	r1, r3
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	f04f 0400 	mov.w	r4, #0
 800368e:	0214      	lsls	r4, r2, #8
 8003690:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003694:	020b      	lsls	r3, r1, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6852      	ldr	r2, [r2, #4]
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	4611      	mov	r1, r2
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	eb13 0b01 	adds.w	fp, r3, r1
 80036a6:	eb44 0c02 	adc.w	ip, r4, r2
 80036aa:	4658      	mov	r0, fp
 80036ac:	4661      	mov	r1, ip
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	f7fd f977 	bl	80009ac <__aeabi_uldivmod>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036c4:	e017      	b.n	80036f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80036d4:	f144 0100 	adc.w	r1, r4, #0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	f7fd f962 	bl	80009ac <__aeabi_uldivmod>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036ee:	e002      	b.n	80036f6 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	76fb      	strb	r3, [r7, #27]
            break;
 80036f4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fc:	d308      	bcc.n	8003710 <UART_SetConfig+0x3b8>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003704:	d204      	bcs.n	8003710 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e0fd      	b.n	800390c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	76fb      	strb	r3, [r7, #27]
 8003714:	e0fa      	b.n	800390c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	f040 8083 	bne.w	8003828 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003726:	2b08      	cmp	r3, #8
 8003728:	d85e      	bhi.n	80037e8 <UART_SetConfig+0x490>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <UART_SetConfig+0x3d8>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003755 	.word	0x08003755
 8003734:	08003775 	.word	0x08003775
 8003738:	08003795 	.word	0x08003795
 800373c:	080037e9 	.word	0x080037e9
 8003740:	080037b1 	.word	0x080037b1
 8003744:	080037e9 	.word	0x080037e9
 8003748:	080037e9 	.word	0x080037e9
 800374c:	080037e9 	.word	0x080037e9
 8003750:	080037d1 	.word	0x080037d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7ff f9ba 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003758:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003772:	e03c      	b.n	80037ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7ff f9c0 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8003778:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	005a      	lsls	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	b29b      	uxth	r3, r3
 8003790:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003792:	e02c      	b.n	80037ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800379e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037ae:	e01e      	b.n	80037ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b0:	f7ff f8f6 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 80037b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	005a      	lsls	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037ce:	e00e      	b.n	80037ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	76fb      	strb	r3, [r7, #27]
        break;
 80037ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d916      	bls.n	8003822 <UART_SetConfig+0x4ca>
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d212      	bcs.n	8003822 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f023 030f 	bic.w	r3, r3, #15
 8003804:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	b29a      	uxth	r2, r3
 8003812:	89fb      	ldrh	r3, [r7, #14]
 8003814:	4313      	orrs	r3, r2
 8003816:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	89fa      	ldrh	r2, [r7, #14]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	e074      	b.n	800390c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	76fb      	strb	r3, [r7, #27]
 8003826:	e071      	b.n	800390c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8003828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800382c:	2b08      	cmp	r3, #8
 800382e:	d85c      	bhi.n	80038ea <UART_SetConfig+0x592>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x4e0>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800385d 	.word	0x0800385d
 800383c:	0800387b 	.word	0x0800387b
 8003840:	08003899 	.word	0x08003899
 8003844:	080038eb 	.word	0x080038eb
 8003848:	080038b5 	.word	0x080038b5
 800384c:	080038eb 	.word	0x080038eb
 8003850:	080038eb 	.word	0x080038eb
 8003854:	080038eb 	.word	0x080038eb
 8003858:	080038d3 	.word	0x080038d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7ff f936 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003860:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085a      	lsrs	r2, r3, #1
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	b29b      	uxth	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003878:	e03a      	b.n	80038f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800387a:	f7ff f93d 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 800387e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	085a      	lsrs	r2, r3, #1
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003896:	e02b      	b.n	80038f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80038a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038b2:	e01d      	b.n	80038f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b4:	f7ff f874 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 80038b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085a      	lsrs	r2, r3, #1
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038d0:	e00e      	b.n	80038f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038e8:	e002      	b.n	80038f0 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	76fb      	strb	r3, [r7, #27]
        break;
 80038ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d908      	bls.n	8003908 <UART_SetConfig+0x5b0>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d204      	bcs.n	8003908 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	e001      	b.n	800390c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003918:	7efb      	ldrb	r3, [r7, #27]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a22:	d10a      	bne.n	8003a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a76:	f7fd fe3d 	bl	80016f4 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d10e      	bne.n	8003aa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f82a 	bl	8003af2 <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e020      	b.n	8003aea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d10e      	bne.n	8003ad4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f814 	bl	8003af2 <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00a      	b.n	8003aea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	e05d      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d059      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0c:	f7fd fdf2 	bl	80016f4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d302      	bcc.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11b      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e042      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02b      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d123      	bne.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e00f      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d092      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0d      	ldr	r6, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1ba4      	subs	r4, r4, r6
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2500      	movs	r5, #0
 8003c00:	42a5      	cmp	r5, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4e0b      	ldr	r6, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 f920 	bl	8003e4c <_init>
 8003c0c:	1ba4      	subs	r4, r4, r6
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2500      	movs	r5, #0
 8003c12:	42a5      	cmp	r5, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1c:	4798      	blx	r3
 8003c1e:	3501      	adds	r5, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c26:	4798      	blx	r3
 8003c28:	3501      	adds	r5, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003ed4 	.word	0x08003ed4
 8003c30:	08003ed4 	.word	0x08003ed4
 8003c34:	08003ed4 	.word	0x08003ed4
 8003c38:	08003ed8 	.word	0x08003ed8

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <srand>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <srand+0x38>)
 8003c50:	681c      	ldr	r4, [r3, #0]
 8003c52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c54:	4605      	mov	r5, r0
 8003c56:	b97b      	cbnz	r3, 8003c78 <srand+0x2c>
 8003c58:	2018      	movs	r0, #24
 8003c5a:	f000 f87b 	bl	8003d54 <malloc>
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <srand+0x3c>)
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <srand+0x40>)
 8003c62:	63a0      	str	r0, [r4, #56]	; 0x38
 8003c64:	e9c0 2300 	strd	r2, r3, [r0]
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <srand+0x44>)
 8003c6a:	6083      	str	r3, [r0, #8]
 8003c6c:	230b      	movs	r3, #11
 8003c6e:	8183      	strh	r3, [r0, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	2300      	movs	r3, #0
 8003c74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611d      	str	r5, [r3, #16]
 8003c7e:	615a      	str	r2, [r3, #20]
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	abcd330e 	.word	0xabcd330e
 8003c8c:	e66d1234 	.word	0xe66d1234
 8003c90:	0005deec 	.word	0x0005deec

08003c94 <rand>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <rand+0x50>)
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c9c:	b97b      	cbnz	r3, 8003cbe <rand+0x2a>
 8003c9e:	2018      	movs	r0, #24
 8003ca0:	f000 f858 	bl	8003d54 <malloc>
 8003ca4:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <rand+0x54>)
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <rand+0x58>)
 8003ca8:	63a0      	str	r0, [r4, #56]	; 0x38
 8003caa:	e9c0 2300 	strd	r2, r3, [r0]
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <rand+0x5c>)
 8003cb0:	6083      	str	r3, [r0, #8]
 8003cb2:	230b      	movs	r3, #11
 8003cb4:	8183      	strh	r3, [r0, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003cbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <rand+0x60>)
 8003cc2:	690a      	ldr	r2, [r1, #16]
 8003cc4:	694b      	ldr	r3, [r1, #20]
 8003cc6:	4c0c      	ldr	r4, [pc, #48]	; (8003cf8 <rand+0x64>)
 8003cc8:	4350      	muls	r0, r2
 8003cca:	fb04 0003 	mla	r0, r4, r3, r0
 8003cce:	fba2 2304 	umull	r2, r3, r2, r4
 8003cd2:	4403      	add	r3, r0
 8003cd4:	1c54      	adds	r4, r2, #1
 8003cd6:	f143 0500 	adc.w	r5, r3, #0
 8003cda:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003cde:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	abcd330e 	.word	0xabcd330e
 8003cec:	e66d1234 	.word	0xe66d1234
 8003cf0:	0005deec 	.word	0x0005deec
 8003cf4:	5851f42d 	.word	0x5851f42d
 8003cf8:	4c957f2d 	.word	0x4c957f2d

08003cfc <time>:
 8003cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <time+0x30>)
 8003d00:	4604      	mov	r4, r0
 8003d02:	2200      	movs	r2, #0
 8003d04:	4669      	mov	r1, sp
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	f000 f812 	bl	8003d30 <_gettimeofday_r>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	da05      	bge.n	8003d1c <time+0x20>
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295
 8003d18:	e9cd 2300 	strd	r2, r3, [sp]
 8003d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d20:	b10c      	cbz	r4, 8003d26 <time+0x2a>
 8003d22:	e9c4 0100 	strd	r0, r1, [r4]
 8003d26:	b004      	add	sp, #16
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	2000000c 	.word	0x2000000c

08003d30 <_gettimeofday_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4c07      	ldr	r4, [pc, #28]	; (8003d50 <_gettimeofday_r+0x20>)
 8003d34:	2300      	movs	r3, #0
 8003d36:	4605      	mov	r5, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	f000 f87d 	bl	8003e3c <_gettimeofday>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d102      	bne.n	8003d4c <_gettimeofday_r+0x1c>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	b103      	cbz	r3, 8003d4c <_gettimeofday_r+0x1c>
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	bf00      	nop
 8003d50:	200006b8 	.word	0x200006b8

08003d54 <malloc>:
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <malloc+0xc>)
 8003d56:	4601      	mov	r1, r0
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f000 b803 	b.w	8003d64 <_malloc_r>
 8003d5e:	bf00      	nop
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <_malloc_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	1ccd      	adds	r5, r1, #3
 8003d68:	f025 0503 	bic.w	r5, r5, #3
 8003d6c:	3508      	adds	r5, #8
 8003d6e:	2d0c      	cmp	r5, #12
 8003d70:	bf38      	it	cc
 8003d72:	250c      	movcc	r5, #12
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	4606      	mov	r6, r0
 8003d78:	db01      	blt.n	8003d7e <_malloc_r+0x1a>
 8003d7a:	42a9      	cmp	r1, r5
 8003d7c:	d903      	bls.n	8003d86 <_malloc_r+0x22>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
 8003d86:	f000 f857 	bl	8003e38 <__malloc_lock>
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <_malloc_r+0xac>)
 8003d8c:	6814      	ldr	r4, [r2, #0]
 8003d8e:	4621      	mov	r1, r4
 8003d90:	b991      	cbnz	r1, 8003db8 <_malloc_r+0x54>
 8003d92:	4c20      	ldr	r4, [pc, #128]	; (8003e14 <_malloc_r+0xb0>)
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	b91b      	cbnz	r3, 8003da0 <_malloc_r+0x3c>
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f000 f83d 	bl	8003e18 <_sbrk_r>
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	4629      	mov	r1, r5
 8003da2:	4630      	mov	r0, r6
 8003da4:	f000 f838 	bl	8003e18 <_sbrk_r>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d124      	bne.n	8003df6 <_malloc_r+0x92>
 8003dac:	230c      	movs	r3, #12
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f842 	bl	8003e3a <__malloc_unlock>
 8003db6:	e7e4      	b.n	8003d82 <_malloc_r+0x1e>
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	1b5b      	subs	r3, r3, r5
 8003dbc:	d418      	bmi.n	8003df0 <_malloc_r+0x8c>
 8003dbe:	2b0b      	cmp	r3, #11
 8003dc0:	d90f      	bls.n	8003de2 <_malloc_r+0x7e>
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	50cd      	str	r5, [r1, r3]
 8003dc6:	18cc      	adds	r4, r1, r3
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f836 	bl	8003e3a <__malloc_unlock>
 8003dce:	f104 000b 	add.w	r0, r4, #11
 8003dd2:	1d23      	adds	r3, r4, #4
 8003dd4:	f020 0007 	bic.w	r0, r0, #7
 8003dd8:	1ac3      	subs	r3, r0, r3
 8003dda:	d0d3      	beq.n	8003d84 <_malloc_r+0x20>
 8003ddc:	425a      	negs	r2, r3
 8003dde:	50e2      	str	r2, [r4, r3]
 8003de0:	e7d0      	b.n	8003d84 <_malloc_r+0x20>
 8003de2:	428c      	cmp	r4, r1
 8003de4:	684b      	ldr	r3, [r1, #4]
 8003de6:	bf16      	itet	ne
 8003de8:	6063      	strne	r3, [r4, #4]
 8003dea:	6013      	streq	r3, [r2, #0]
 8003dec:	460c      	movne	r4, r1
 8003dee:	e7eb      	b.n	8003dc8 <_malloc_r+0x64>
 8003df0:	460c      	mov	r4, r1
 8003df2:	6849      	ldr	r1, [r1, #4]
 8003df4:	e7cc      	b.n	8003d90 <_malloc_r+0x2c>
 8003df6:	1cc4      	adds	r4, r0, #3
 8003df8:	f024 0403 	bic.w	r4, r4, #3
 8003dfc:	42a0      	cmp	r0, r4
 8003dfe:	d005      	beq.n	8003e0c <_malloc_r+0xa8>
 8003e00:	1a21      	subs	r1, r4, r0
 8003e02:	4630      	mov	r0, r6
 8003e04:	f000 f808 	bl	8003e18 <_sbrk_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d0cf      	beq.n	8003dac <_malloc_r+0x48>
 8003e0c:	6025      	str	r5, [r4, #0]
 8003e0e:	e7db      	b.n	8003dc8 <_malloc_r+0x64>
 8003e10:	20000090 	.word	0x20000090
 8003e14:	20000094 	.word	0x20000094

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4c06      	ldr	r4, [pc, #24]	; (8003e34 <_sbrk_r+0x1c>)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4605      	mov	r5, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	f7fd fa04 	bl	8001230 <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	200006b8 	.word	0x200006b8

08003e38 <__malloc_lock>:
 8003e38:	4770      	bx	lr

08003e3a <__malloc_unlock>:
 8003e3a:	4770      	bx	lr

08003e3c <_gettimeofday>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <_gettimeofday+0xc>)
 8003e3e:	2258      	movs	r2, #88	; 0x58
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	4770      	bx	lr
 8003e48:	200006b8 	.word	0x200006b8

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
